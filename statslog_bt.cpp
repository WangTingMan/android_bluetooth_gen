// This file is autogenerated

#include <statslog_bt.h>
#include <stats_event.h>
#include <stats_annotations.h>

namespace bluetooth {

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int32_t arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    if (BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, char const* arg3, char const* arg4, char const* arg5, char const* arg6, char const* arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int64_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int64_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, bool arg3, bool arg4, bool arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, true);
        if (arg2 == 2) {
            AStatsEvent_addInt32Annotation(event, ASTATSLOG_ANNOTATION_ID_TRIGGER_STATE_RESET, 0);
        }
    }
    AStatsEvent_writeBool(event, arg3);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeBool(event, arg4);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeBool(event, arg5);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, int32_t arg3, char const* arg4, int32_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2, bool arg3, bool arg4, bool arg5, bool arg6, bool arg7, bool arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, int64_t arg5, int32_t arg6, int64_t arg7, int64_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    if (BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, int64_t arg5, int64_t arg6, int32_t arg7, int64_t arg8, int64_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    if (BLUETOOTH_L2CAP_COC_SERVER_CONNECTION == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (BLUETOOTH_GATT_APP_INFO == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeInt64(event, arg18);
    AStatsEvent_writeInt64(event, arg19);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int32_t arg6, int32_t arg7, int64_t arg8, int32_t arg9, bool arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    if (BLUETOOTH_LE_SESSION_CONNECTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, const std::vector<int64_t>& arg4, const std::vector<int64_t>& arg5, const std::vector<int64_t>& arg6, const std::vector<int32_t>& arg7, const std::vector<int32_t>& arg8, const std::vector<int32_t>& arg9, const std::vector<int64_t>& arg10, const std::vector<int64_t>& arg11, const std::vector<int32_t>& arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64Array(event, arg4.data(), arg4.size());
    AStatsEvent_writeInt64Array(event, arg5.data(), arg5.size());
    AStatsEvent_writeInt64Array(event, arg6.data(), arg6.size());
    AStatsEvent_writeInt32Array(event, arg7.data(), arg7.size());
    AStatsEvent_writeInt32Array(event, arg8.data(), arg8.size());
    AStatsEvent_writeInt32Array(event, arg9.data(), arg9.size());
    AStatsEvent_writeInt64Array(event, arg10.data(), arg10.size());
    AStatsEvent_writeInt64Array(event, arg11.data(), arg11.size());
    AStatsEvent_writeInt32Array(event, arg12.data(), arg12.size());
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int32_t arg3, int32_t arg4, bool arg5, int32_t arg6, const BytesField& arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    if (BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}


int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, bool arg4, bool arg5, bool arg6) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, char const* arg5, int32_t arg6, int64_t arg7) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6, arg7);
}



} // namespace bluetooth
