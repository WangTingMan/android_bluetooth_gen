// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_
#define FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace bluetooth {
namespace hci {

struct AclManagerData;
struct AclManagerDataBuilder;

struct AclManagerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AclManagerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_LE_FILTER_ACCEPT_LIST_COUNT = 6,
    VT_LE_FILTER_ACCEPT_LIST = 8,
    VT_LE_CONNECTABILITY_STATE = 10,
    VT_LE_CREATE_CONNECTION_TIMEOUT_ALARMS_COUNT = 12
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  int32_t le_filter_accept_list_count() const {
    return GetField<int32_t>(VT_LE_FILTER_ACCEPT_LIST_COUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *le_filter_accept_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_LE_FILTER_ACCEPT_LIST);
  }
  const flatbuffers::String *le_connectability_state() const {
    return GetPointer<const flatbuffers::String *>(VT_LE_CONNECTABILITY_STATE);
  }
  int32_t le_create_connection_timeout_alarms_count() const {
    return GetField<int32_t>(VT_LE_CREATE_CONNECTION_TIMEOUT_ALARMS_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<int32_t>(verifier, VT_LE_FILTER_ACCEPT_LIST_COUNT, 4) &&
           VerifyOffset(verifier, VT_LE_FILTER_ACCEPT_LIST) &&
           verifier.VerifyVector(le_filter_accept_list()) &&
           verifier.VerifyVectorOfStrings(le_filter_accept_list()) &&
           VerifyOffset(verifier, VT_LE_CONNECTABILITY_STATE) &&
           verifier.VerifyString(le_connectability_state()) &&
           VerifyField<int32_t>(verifier, VT_LE_CREATE_CONNECTION_TIMEOUT_ALARMS_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct AclManagerDataBuilder {
  typedef AclManagerData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(AclManagerData::VT_TITLE, title);
  }
  void add_le_filter_accept_list_count(int32_t le_filter_accept_list_count) {
    fbb_.AddElement<int32_t>(AclManagerData::VT_LE_FILTER_ACCEPT_LIST_COUNT, le_filter_accept_list_count, 0);
  }
  void add_le_filter_accept_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> le_filter_accept_list) {
    fbb_.AddOffset(AclManagerData::VT_LE_FILTER_ACCEPT_LIST, le_filter_accept_list);
  }
  void add_le_connectability_state(flatbuffers::Offset<flatbuffers::String> le_connectability_state) {
    fbb_.AddOffset(AclManagerData::VT_LE_CONNECTABILITY_STATE, le_connectability_state);
  }
  void add_le_create_connection_timeout_alarms_count(int32_t le_create_connection_timeout_alarms_count) {
    fbb_.AddElement<int32_t>(AclManagerData::VT_LE_CREATE_CONNECTION_TIMEOUT_ALARMS_COUNT, le_create_connection_timeout_alarms_count, 0);
  }
  explicit AclManagerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AclManagerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AclManagerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AclManagerData> CreateAclManagerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    int32_t le_filter_accept_list_count = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> le_filter_accept_list = 0,
    flatbuffers::Offset<flatbuffers::String> le_connectability_state = 0,
    int32_t le_create_connection_timeout_alarms_count = 0) {
  AclManagerDataBuilder builder_(_fbb);
  builder_.add_le_create_connection_timeout_alarms_count(le_create_connection_timeout_alarms_count);
  builder_.add_le_connectability_state(le_connectability_state);
  builder_.add_le_filter_accept_list(le_filter_accept_list);
  builder_.add_le_filter_accept_list_count(le_filter_accept_list_count);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<AclManagerData> CreateAclManagerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    int32_t le_filter_accept_list_count = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *le_filter_accept_list = nullptr,
    const char *le_connectability_state = nullptr,
    int32_t le_create_connection_timeout_alarms_count = 0) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto le_filter_accept_list__ = le_filter_accept_list ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*le_filter_accept_list) : 0;
  auto le_connectability_state__ = le_connectability_state ? _fbb.CreateString(le_connectability_state) : 0;
  return bluetooth::hci::CreateAclManagerData(
      _fbb,
      title__,
      le_filter_accept_list_count,
      le_filter_accept_list__,
      le_connectability_state__,
      le_create_connection_timeout_alarms_count);
}

inline const bluetooth::hci::AclManagerData *GetAclManagerData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::hci::AclManagerData>(buf);
}

inline const bluetooth::hci::AclManagerData *GetSizePrefixedAclManagerData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::hci::AclManagerData>(buf);
}

inline bool VerifyAclManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::hci::AclManagerData>(nullptr);
}

inline bool VerifySizePrefixedAclManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::hci::AclManagerData>(nullptr);
}

inline void FinishAclManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAclManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hci
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_
