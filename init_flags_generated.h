// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_
#define FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace bluetooth {
namespace common {

struct InitFlagsData;
struct InitFlagsDataBuilder;

struct InitFlagValue;
struct InitFlagValueBuilder;

struct InitFlagsData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InitFlagsDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_VALUES = 6
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<bluetooth::common::InitFlagValue>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<bluetooth::common::InitFlagValue>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfTables(values()) &&
           verifier.EndTable();
  }
};

struct InitFlagsDataBuilder {
  typedef InitFlagsData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(InitFlagsData::VT_TITLE, title);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::common::InitFlagValue>>> values) {
    fbb_.AddOffset(InitFlagsData::VT_VALUES, values);
  }
  explicit InitFlagsDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InitFlagsData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InitFlagsData>(end);
    return o;
  }
};

inline flatbuffers::Offset<InitFlagsData> CreateInitFlagsData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::common::InitFlagValue>>> values = 0) {
  InitFlagsDataBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<InitFlagsData> CreateInitFlagsDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const std::vector<flatbuffers::Offset<bluetooth::common::InitFlagValue>> *values = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto values__ = values ? _fbb.CreateVector<flatbuffers::Offset<bluetooth::common::InitFlagValue>>(*values) : 0;
  return bluetooth::common::CreateInitFlagsData(
      _fbb,
      title__,
      values__);
}

struct InitFlagValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InitFlagValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLAG = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *flag() const {
    return GetPointer<const flatbuffers::String *>(VT_FLAG);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FLAG) &&
           verifier.VerifyString(flag()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct InitFlagValueBuilder {
  typedef InitFlagValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_flag(flatbuffers::Offset<flatbuffers::String> flag) {
    fbb_.AddOffset(InitFlagValue::VT_FLAG, flag);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(InitFlagValue::VT_VALUE, value);
  }
  explicit InitFlagValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InitFlagValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InitFlagValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<InitFlagValue> CreateInitFlagValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> flag = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  InitFlagValueBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_flag(flag);
  return builder_.Finish();
}

inline flatbuffers::Offset<InitFlagValue> CreateInitFlagValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *flag = nullptr,
    const char *value = nullptr) {
  auto flag__ = flag ? _fbb.CreateString(flag) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return bluetooth::common::CreateInitFlagValue(
      _fbb,
      flag__,
      value__);
}

inline const bluetooth::common::InitFlagsData *GetInitFlagsData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::common::InitFlagsData>(buf);
}

inline const bluetooth::common::InitFlagsData *GetSizePrefixedInitFlagsData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::common::InitFlagsData>(buf);
}

inline bool VerifyInitFlagsDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::common::InitFlagsData>(nullptr);
}

inline bool VerifySizePrefixedInitFlagsDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::common::InitFlagsData>(nullptr);
}

inline void FinishInitFlagsDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInitFlagsDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace common
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_
