// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/rfcomm/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2frfcomm_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2frfcomm_2fenums_2eproto

#include <cstdint>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2frfcomm_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2frfcomm_2fenums_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace bluetooth {
namespace rfcomm {

enum RfcommConnectionResult : int {
  RFCOMM_CONN_RESULT_FAILURE_UNKNOWN = 0,
  RFCOMM_CONN_RESULT_SUCCESS = 1,
  RFCOMM_CONN_RESULT_SOCKET_CONNECTION_FAILED = 2,
  RFCOMM_CONN_RESULT_SOCKET_CONNECTION_CLOSED = 3,
  RFCOMM_CONN_RESULT_UNABLE_TO_SEND_RPC = 4,
  RFCOMM_CONN_RESULT_NULL_BLUETOOTH_DEVICE = 5,
  RFCOMM_CONN_RESULT_GET_SOCKET_MANAGER_FAILED = 6,
  RFCOMM_CONN_RESULT_NULL_FILE_DESCRIPTOR = 7
};
bool RfcommConnectionResult_IsValid(int value);
constexpr RfcommConnectionResult RfcommConnectionResult_MIN = RFCOMM_CONN_RESULT_FAILURE_UNKNOWN;
constexpr RfcommConnectionResult RfcommConnectionResult_MAX = RFCOMM_CONN_RESULT_NULL_FILE_DESCRIPTOR;
constexpr int RfcommConnectionResult_ARRAYSIZE = RfcommConnectionResult_MAX + 1;

const std::string& RfcommConnectionResult_Name(RfcommConnectionResult value);
template<typename T>
inline const std::string& RfcommConnectionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RfcommConnectionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RfcommConnectionResult_Name.");
  return RfcommConnectionResult_Name(static_cast<RfcommConnectionResult>(enum_t_value));
}
bool RfcommConnectionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RfcommConnectionResult* value);
enum SocketConnectionSecurity : int {
  SOCKET_SECURITY_UNKNOWN = 0,
  SOCKET_SECURITY_SECURE = 1,
  SOCKET_SECURITY_INSECURE = 2
};
bool SocketConnectionSecurity_IsValid(int value);
constexpr SocketConnectionSecurity SocketConnectionSecurity_MIN = SOCKET_SECURITY_UNKNOWN;
constexpr SocketConnectionSecurity SocketConnectionSecurity_MAX = SOCKET_SECURITY_INSECURE;
constexpr int SocketConnectionSecurity_ARRAYSIZE = SocketConnectionSecurity_MAX + 1;

const std::string& SocketConnectionSecurity_Name(SocketConnectionSecurity value);
template<typename T>
inline const std::string& SocketConnectionSecurity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SocketConnectionSecurity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SocketConnectionSecurity_Name.");
  return SocketConnectionSecurity_Name(static_cast<SocketConnectionSecurity>(enum_t_value));
}
bool SocketConnectionSecurity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketConnectionSecurity* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rfcomm
}  // namespace bluetooth
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::bluetooth::rfcomm::RfcommConnectionResult> : ::std::true_type {};
template <> struct is_proto_enum< ::android::bluetooth::rfcomm::SocketConnectionSecurity> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2frfcomm_2fenums_2eproto
