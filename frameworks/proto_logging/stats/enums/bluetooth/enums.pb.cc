// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/enums.proto

#include "frameworks/proto_logging/stats/enums/bluetooth/enums.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace android {
namespace bluetooth {
}  // namespace bluetooth
}  // namespace android
namespace android {
namespace bluetooth {
bool ConnectionStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionStateEnum_strings[4] = {};

static const char ConnectionStateEnum_names[] =
  "CONNECTION_STATE_CONNECTED"
  "CONNECTION_STATE_CONNECTING"
  "CONNECTION_STATE_DISCONNECTED"
  "CONNECTION_STATE_DISCONNECTING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionStateEnum_entries[] = {
  { {ConnectionStateEnum_names + 0, 26}, 2 },
  { {ConnectionStateEnum_names + 26, 27}, 1 },
  { {ConnectionStateEnum_names + 53, 29}, 0 },
  { {ConnectionStateEnum_names + 82, 30}, 3 },
};

static const int ConnectionStateEnum_entries_by_number[] = {
  2, // 0 -> CONNECTION_STATE_DISCONNECTED
  1, // 1 -> CONNECTION_STATE_CONNECTING
  0, // 2 -> CONNECTION_STATE_CONNECTED
  3, // 3 -> CONNECTION_STATE_DISCONNECTING
};

const std::string& ConnectionStateEnum_Name(
    ConnectionStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionStateEnum_entries,
          ConnectionStateEnum_entries_by_number,
          4, ConnectionStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionStateEnum_entries,
      ConnectionStateEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionStateEnum_strings[idx].get();
}
bool ConnectionStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionStateEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionStateEnum>(int_value);
  }
  return success;
}
bool EnableDisableReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EnableDisableReasonEnum_strings[13] = {};

static const char EnableDisableReasonEnum_names[] =
  "ENABLE_DISABLE_REASON_AIRPLANE_MODE"
  "ENABLE_DISABLE_REASON_APPLICATION_REQUEST"
  "ENABLE_DISABLE_REASON_CRASH"
  "ENABLE_DISABLE_REASON_DISALLOWED"
  "ENABLE_DISABLE_REASON_FACTORY_RESET"
  "ENABLE_DISABLE_REASON_INIT_FLAGS_CHANGED"
  "ENABLE_DISABLE_REASON_RESTARTED"
  "ENABLE_DISABLE_REASON_RESTORE_USER_SETTING"
  "ENABLE_DISABLE_REASON_SATELLITE_MODE"
  "ENABLE_DISABLE_REASON_START_ERROR"
  "ENABLE_DISABLE_REASON_SYSTEM_BOOT"
  "ENABLE_DISABLE_REASON_UNSPECIFIED"
  "ENABLE_DISABLE_REASON_USER_SWITCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EnableDisableReasonEnum_entries[] = {
  { {EnableDisableReasonEnum_names + 0, 35}, 2 },
  { {EnableDisableReasonEnum_names + 35, 41}, 1 },
  { {EnableDisableReasonEnum_names + 76, 27}, 7 },
  { {EnableDisableReasonEnum_names + 103, 32}, 3 },
  { {EnableDisableReasonEnum_names + 135, 35}, 10 },
  { {EnableDisableReasonEnum_names + 170, 40}, 11 },
  { {EnableDisableReasonEnum_names + 210, 31}, 4 },
  { {EnableDisableReasonEnum_names + 241, 42}, 9 },
  { {EnableDisableReasonEnum_names + 283, 36}, 12 },
  { {EnableDisableReasonEnum_names + 319, 33}, 5 },
  { {EnableDisableReasonEnum_names + 352, 33}, 6 },
  { {EnableDisableReasonEnum_names + 385, 33}, 0 },
  { {EnableDisableReasonEnum_names + 418, 33}, 8 },
};

static const int EnableDisableReasonEnum_entries_by_number[] = {
  11, // 0 -> ENABLE_DISABLE_REASON_UNSPECIFIED
  1, // 1 -> ENABLE_DISABLE_REASON_APPLICATION_REQUEST
  0, // 2 -> ENABLE_DISABLE_REASON_AIRPLANE_MODE
  3, // 3 -> ENABLE_DISABLE_REASON_DISALLOWED
  6, // 4 -> ENABLE_DISABLE_REASON_RESTARTED
  9, // 5 -> ENABLE_DISABLE_REASON_START_ERROR
  10, // 6 -> ENABLE_DISABLE_REASON_SYSTEM_BOOT
  2, // 7 -> ENABLE_DISABLE_REASON_CRASH
  12, // 8 -> ENABLE_DISABLE_REASON_USER_SWITCH
  7, // 9 -> ENABLE_DISABLE_REASON_RESTORE_USER_SETTING
  4, // 10 -> ENABLE_DISABLE_REASON_FACTORY_RESET
  5, // 11 -> ENABLE_DISABLE_REASON_INIT_FLAGS_CHANGED
  8, // 12 -> ENABLE_DISABLE_REASON_SATELLITE_MODE
};

const std::string& EnableDisableReasonEnum_Name(
    EnableDisableReasonEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EnableDisableReasonEnum_entries,
          EnableDisableReasonEnum_entries_by_number,
          13, EnableDisableReasonEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EnableDisableReasonEnum_entries,
      EnableDisableReasonEnum_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EnableDisableReasonEnum_strings[idx].get();
}
bool EnableDisableReasonEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnableDisableReasonEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EnableDisableReasonEnum_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<EnableDisableReasonEnum>(int_value);
  }
  return success;
}
bool DirectionEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionEnum_strings[3] = {};

static const char DirectionEnum_names[] =
  "DIRECTION_INCOMING"
  "DIRECTION_OUTGOING"
  "DIRECTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionEnum_entries[] = {
  { {DirectionEnum_names + 0, 18}, 2 },
  { {DirectionEnum_names + 18, 18}, 1 },
  { {DirectionEnum_names + 36, 17}, 0 },
};

static const int DirectionEnum_entries_by_number[] = {
  2, // 0 -> DIRECTION_UNKNOWN
  1, // 1 -> DIRECTION_OUTGOING
  0, // 2 -> DIRECTION_INCOMING
};

const std::string& DirectionEnum_Name(
    DirectionEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionEnum_entries,
          DirectionEnum_entries_by_number,
          3, DirectionEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionEnum_entries,
      DirectionEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionEnum_strings[idx].get();
}
bool DirectionEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DirectionEnum>(int_value);
  }
  return success;
}
bool LinkTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4095:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LinkTypeEnum_strings[4] = {};

static const char LinkTypeEnum_names[] =
  "LINK_TYPE_ACL"
  "LINK_TYPE_ESCO"
  "LINK_TYPE_SCO"
  "LINK_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LinkTypeEnum_entries[] = {
  { {LinkTypeEnum_names + 0, 13}, 1 },
  { {LinkTypeEnum_names + 13, 14}, 2 },
  { {LinkTypeEnum_names + 27, 13}, 0 },
  { {LinkTypeEnum_names + 40, 17}, 4095 },
};

static const int LinkTypeEnum_entries_by_number[] = {
  2, // 0 -> LINK_TYPE_SCO
  0, // 1 -> LINK_TYPE_ACL
  1, // 2 -> LINK_TYPE_ESCO
  3, // 4095 -> LINK_TYPE_UNKNOWN
};

const std::string& LinkTypeEnum_Name(
    LinkTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LinkTypeEnum_entries,
          LinkTypeEnum_entries_by_number,
          4, LinkTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LinkTypeEnum_entries,
      LinkTypeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LinkTypeEnum_strings[idx].get();
}
bool LinkTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinkTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LinkTypeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LinkTypeEnum>(int_value);
  }
  return success;
}
bool DeviceInfoSrcEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceInfoSrcEnum_strings[3] = {};

static const char DeviceInfoSrcEnum_names[] =
  "DEVICE_INFO_EXTERNAL"
  "DEVICE_INFO_INTERNAL"
  "DEVICE_INFO_SRC_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceInfoSrcEnum_entries[] = {
  { {DeviceInfoSrcEnum_names + 0, 20}, 2 },
  { {DeviceInfoSrcEnum_names + 20, 20}, 1 },
  { {DeviceInfoSrcEnum_names + 40, 23}, 0 },
};

static const int DeviceInfoSrcEnum_entries_by_number[] = {
  2, // 0 -> DEVICE_INFO_SRC_UNKNOWN
  1, // 1 -> DEVICE_INFO_INTERNAL
  0, // 2 -> DEVICE_INFO_EXTERNAL
};

const std::string& DeviceInfoSrcEnum_Name(
    DeviceInfoSrcEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceInfoSrcEnum_entries,
          DeviceInfoSrcEnum_entries_by_number,
          3, DeviceInfoSrcEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceInfoSrcEnum_entries,
      DeviceInfoSrcEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceInfoSrcEnum_strings[idx].get();
}
bool DeviceInfoSrcEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceInfoSrcEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceInfoSrcEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceInfoSrcEnum>(int_value);
  }
  return success;
}
bool DeviceTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceTypeEnum_strings[4] = {};

static const char DeviceTypeEnum_names[] =
  "DEVICE_TYPE_CLASSIC"
  "DEVICE_TYPE_DUAL"
  "DEVICE_TYPE_LE"
  "DEVICE_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceTypeEnum_entries[] = {
  { {DeviceTypeEnum_names + 0, 19}, 1 },
  { {DeviceTypeEnum_names + 19, 16}, 3 },
  { {DeviceTypeEnum_names + 35, 14}, 2 },
  { {DeviceTypeEnum_names + 49, 19}, 0 },
};

static const int DeviceTypeEnum_entries_by_number[] = {
  3, // 0 -> DEVICE_TYPE_UNKNOWN
  0, // 1 -> DEVICE_TYPE_CLASSIC
  2, // 2 -> DEVICE_TYPE_LE
  1, // 3 -> DEVICE_TYPE_DUAL
};

const std::string& DeviceTypeEnum_Name(
    DeviceTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceTypeEnum_entries,
          DeviceTypeEnum_entries_by_number,
          4, DeviceTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceTypeEnum_entries,
      DeviceTypeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceTypeEnum_strings[idx].get();
}
bool DeviceTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceTypeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceTypeEnum>(int_value);
  }
  return success;
}
bool TransportTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransportTypeEnum_strings[3] = {};

static const char TransportTypeEnum_names[] =
  "TRANSPORT_TYPE_AUTO"
  "TRANSPORT_TYPE_BREDR"
  "TRANSPORT_TYPE_LE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransportTypeEnum_entries[] = {
  { {TransportTypeEnum_names + 0, 19}, 0 },
  { {TransportTypeEnum_names + 19, 20}, 1 },
  { {TransportTypeEnum_names + 39, 17}, 2 },
};

static const int TransportTypeEnum_entries_by_number[] = {
  0, // 0 -> TRANSPORT_TYPE_AUTO
  1, // 1 -> TRANSPORT_TYPE_BREDR
  2, // 2 -> TRANSPORT_TYPE_LE
};

const std::string& TransportTypeEnum_Name(
    TransportTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransportTypeEnum_entries,
          TransportTypeEnum_entries_by_number,
          3, TransportTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransportTypeEnum_entries,
      TransportTypeEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransportTypeEnum_strings[idx].get();
}
bool TransportTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransportTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransportTypeEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TransportTypeEnum>(int_value);
  }
  return success;
}
bool BondStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BondStateEnum_strings[4] = {};

static const char BondStateEnum_names[] =
  "BOND_STATE_BONDED"
  "BOND_STATE_BONDING"
  "BOND_STATE_NONE"
  "BOND_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BondStateEnum_entries[] = {
  { {BondStateEnum_names + 0, 17}, 12 },
  { {BondStateEnum_names + 17, 18}, 11 },
  { {BondStateEnum_names + 35, 15}, 10 },
  { {BondStateEnum_names + 50, 18}, 0 },
};

static const int BondStateEnum_entries_by_number[] = {
  3, // 0 -> BOND_STATE_UNKNOWN
  2, // 10 -> BOND_STATE_NONE
  1, // 11 -> BOND_STATE_BONDING
  0, // 12 -> BOND_STATE_BONDED
};

const std::string& BondStateEnum_Name(
    BondStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BondStateEnum_entries,
          BondStateEnum_entries_by_number,
          4, BondStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BondStateEnum_entries,
      BondStateEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BondStateEnum_strings[idx].get();
}
bool BondStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BondStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BondStateEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BondStateEnum>(int_value);
  }
  return success;
}
bool BondSubStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BondSubStateEnum_strings[9] = {};

static const char BondSubStateEnum_names[] =
  "BOND_SUB_STATE_LOCAL_BOND_STATE_INTENT_SENT"
  "BOND_SUB_STATE_LOCAL_OOB_DATA_PROVIDED"
  "BOND_SUB_STATE_LOCAL_PIN_REPLIED"
  "BOND_SUB_STATE_LOCAL_PIN_REQUESTED"
  "BOND_SUB_STATE_LOCAL_SSP_REPLIED"
  "BOND_SUB_STATE_LOCAL_SSP_REQUESTED"
  "BOND_SUB_STATE_LOCAL_START_PAIRING"
  "BOND_SUB_STATE_LOCAL_START_PAIRING_OOB"
  "BOND_SUB_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BondSubStateEnum_entries[] = {
  { {BondSubStateEnum_names + 0, 43}, 6 },
  { {BondSubStateEnum_names + 43, 38}, 1 },
  { {BondSubStateEnum_names + 81, 32}, 3 },
  { {BondSubStateEnum_names + 113, 34}, 2 },
  { {BondSubStateEnum_names + 147, 32}, 5 },
  { {BondSubStateEnum_names + 179, 34}, 4 },
  { {BondSubStateEnum_names + 213, 34}, 7 },
  { {BondSubStateEnum_names + 247, 38}, 8 },
  { {BondSubStateEnum_names + 285, 22}, 0 },
};

static const int BondSubStateEnum_entries_by_number[] = {
  8, // 0 -> BOND_SUB_STATE_UNKNOWN
  1, // 1 -> BOND_SUB_STATE_LOCAL_OOB_DATA_PROVIDED
  3, // 2 -> BOND_SUB_STATE_LOCAL_PIN_REQUESTED
  2, // 3 -> BOND_SUB_STATE_LOCAL_PIN_REPLIED
  5, // 4 -> BOND_SUB_STATE_LOCAL_SSP_REQUESTED
  4, // 5 -> BOND_SUB_STATE_LOCAL_SSP_REPLIED
  0, // 6 -> BOND_SUB_STATE_LOCAL_BOND_STATE_INTENT_SENT
  6, // 7 -> BOND_SUB_STATE_LOCAL_START_PAIRING
  7, // 8 -> BOND_SUB_STATE_LOCAL_START_PAIRING_OOB
};

const std::string& BondSubStateEnum_Name(
    BondSubStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BondSubStateEnum_entries,
          BondSubStateEnum_entries_by_number,
          9, BondSubStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BondSubStateEnum_entries,
      BondSubStateEnum_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BondSubStateEnum_strings[idx].get();
}
bool BondSubStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BondSubStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BondSubStateEnum_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<BondSubStateEnum>(int_value);
  }
  return success;
}
bool UnbondReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UnbondReasonEnum_strings[10] = {};

static const char UnbondReasonEnum_names[] =
  "UNBOND_REASON_AUTH_CANCELED"
  "UNBOND_REASON_AUTH_FAILED"
  "UNBOND_REASON_AUTH_REJECTED"
  "UNBOND_REASON_AUTH_TIMEOUT"
  "UNBOND_REASON_DISCOVERY_IN_PROGRESS"
  "UNBOND_REASON_REMOTE_AUTH_CANCELED"
  "UNBOND_REASON_REMOTE_DEVICE_DOWN"
  "UNBOND_REASON_REMOVED"
  "UNBOND_REASON_REPEATED_ATTEMPTS"
  "UNBOND_REASON_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UnbondReasonEnum_entries[] = {
  { {UnbondReasonEnum_names + 0, 27}, 3 },
  { {UnbondReasonEnum_names + 27, 25}, 1 },
  { {UnbondReasonEnum_names + 52, 27}, 2 },
  { {UnbondReasonEnum_names + 79, 26}, 6 },
  { {UnbondReasonEnum_names + 105, 35}, 5 },
  { {UnbondReasonEnum_names + 140, 34}, 8 },
  { {UnbondReasonEnum_names + 174, 32}, 4 },
  { {UnbondReasonEnum_names + 206, 21}, 9 },
  { {UnbondReasonEnum_names + 227, 31}, 7 },
  { {UnbondReasonEnum_names + 258, 21}, 0 },
};

static const int UnbondReasonEnum_entries_by_number[] = {
  9, // 0 -> UNBOND_REASON_UNKNOWN
  1, // 1 -> UNBOND_REASON_AUTH_FAILED
  2, // 2 -> UNBOND_REASON_AUTH_REJECTED
  0, // 3 -> UNBOND_REASON_AUTH_CANCELED
  6, // 4 -> UNBOND_REASON_REMOTE_DEVICE_DOWN
  4, // 5 -> UNBOND_REASON_DISCOVERY_IN_PROGRESS
  3, // 6 -> UNBOND_REASON_AUTH_TIMEOUT
  8, // 7 -> UNBOND_REASON_REPEATED_ATTEMPTS
  5, // 8 -> UNBOND_REASON_REMOTE_AUTH_CANCELED
  7, // 9 -> UNBOND_REASON_REMOVED
};

const std::string& UnbondReasonEnum_Name(
    UnbondReasonEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UnbondReasonEnum_entries,
          UnbondReasonEnum_entries_by_number,
          10, UnbondReasonEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UnbondReasonEnum_entries,
      UnbondReasonEnum_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UnbondReasonEnum_strings[idx].get();
}
bool UnbondReasonEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnbondReasonEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UnbondReasonEnum_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<UnbondReasonEnum>(int_value);
  }
  return success;
}
bool SocketTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocketTypeEnum_strings[5] = {};

static const char SocketTypeEnum_names[] =
  "SOCKET_TYPE_L2CAP_BREDR"
  "SOCKET_TYPE_L2CAP_LE"
  "SOCKET_TYPE_RFCOMM"
  "SOCKET_TYPE_SCO"
  "SOCKET_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketTypeEnum_entries[] = {
  { {SocketTypeEnum_names + 0, 23}, 3 },
  { {SocketTypeEnum_names + 23, 20}, 4 },
  { {SocketTypeEnum_names + 43, 18}, 1 },
  { {SocketTypeEnum_names + 61, 15}, 2 },
  { {SocketTypeEnum_names + 76, 19}, 0 },
};

static const int SocketTypeEnum_entries_by_number[] = {
  4, // 0 -> SOCKET_TYPE_UNKNOWN
  2, // 1 -> SOCKET_TYPE_RFCOMM
  3, // 2 -> SOCKET_TYPE_SCO
  0, // 3 -> SOCKET_TYPE_L2CAP_BREDR
  1, // 4 -> SOCKET_TYPE_L2CAP_LE
};

const std::string& SocketTypeEnum_Name(
    SocketTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketTypeEnum_entries,
          SocketTypeEnum_entries_by_number,
          5, SocketTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketTypeEnum_entries,
      SocketTypeEnum_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocketTypeEnum_strings[idx].get();
}
bool SocketTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketTypeEnum_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SocketTypeEnum>(int_value);
  }
  return success;
}
bool SocketConnectionstateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocketConnectionstateEnum_strings[6] = {};

static const char SocketConnectionstateEnum_names[] =
  "SOCKET_CONNECTION_STATE_CONNECTED"
  "SOCKET_CONNECTION_STATE_CONNECTING"
  "SOCKET_CONNECTION_STATE_DISCONNECTED"
  "SOCKET_CONNECTION_STATE_DISCONNECTING"
  "SOCKET_CONNECTION_STATE_LISTENING"
  "SOCKET_CONNECTION_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketConnectionstateEnum_entries[] = {
  { {SocketConnectionstateEnum_names + 0, 33}, 3 },
  { {SocketConnectionstateEnum_names + 33, 34}, 2 },
  { {SocketConnectionstateEnum_names + 67, 36}, 5 },
  { {SocketConnectionstateEnum_names + 103, 37}, 4 },
  { {SocketConnectionstateEnum_names + 140, 33}, 1 },
  { {SocketConnectionstateEnum_names + 173, 31}, 0 },
};

static const int SocketConnectionstateEnum_entries_by_number[] = {
  5, // 0 -> SOCKET_CONNECTION_STATE_UNKNOWN
  4, // 1 -> SOCKET_CONNECTION_STATE_LISTENING
  1, // 2 -> SOCKET_CONNECTION_STATE_CONNECTING
  0, // 3 -> SOCKET_CONNECTION_STATE_CONNECTED
  3, // 4 -> SOCKET_CONNECTION_STATE_DISCONNECTING
  2, // 5 -> SOCKET_CONNECTION_STATE_DISCONNECTED
};

const std::string& SocketConnectionstateEnum_Name(
    SocketConnectionstateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketConnectionstateEnum_entries,
          SocketConnectionstateEnum_entries_by_number,
          6, SocketConnectionstateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketConnectionstateEnum_entries,
      SocketConnectionstateEnum_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocketConnectionstateEnum_strings[idx].get();
}
bool SocketConnectionstateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketConnectionstateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketConnectionstateEnum_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<SocketConnectionstateEnum>(int_value);
  }
  return success;
}
bool SocketRoleEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocketRoleEnum_strings[3] = {};

static const char SocketRoleEnum_names[] =
  "SOCKET_ROLE_CONNECTION"
  "SOCKET_ROLE_LISTEN"
  "SOCKET_ROLE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketRoleEnum_entries[] = {
  { {SocketRoleEnum_names + 0, 22}, 2 },
  { {SocketRoleEnum_names + 22, 18}, 1 },
  { {SocketRoleEnum_names + 40, 19}, 0 },
};

static const int SocketRoleEnum_entries_by_number[] = {
  2, // 0 -> SOCKET_ROLE_UNKNOWN
  1, // 1 -> SOCKET_ROLE_LISTEN
  0, // 2 -> SOCKET_ROLE_CONNECTION
};

const std::string& SocketRoleEnum_Name(
    SocketRoleEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketRoleEnum_entries,
          SocketRoleEnum_entries_by_number,
          3, SocketRoleEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketRoleEnum_entries,
      SocketRoleEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocketRoleEnum_strings[idx].get();
}
bool SocketRoleEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketRoleEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketRoleEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SocketRoleEnum>(int_value);
  }
  return success;
}
bool L2capCocConnectionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 2000:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> L2capCocConnectionResult_strings[23] = {};

static const char L2capCocConnectionResult_names[] =
  "RESULT_L2CAP_CONN_ACL_FAILURE"
  "RESULT_L2CAP_CONN_BLUETOOTH_GET_SOCKET_MANAGER_FAILED"
  "RESULT_L2CAP_CONN_BLUETOOTH_NULL_BLUETOOTH_DEVICE"
  "RESULT_L2CAP_CONN_BLUETOOTH_NULL_FILE_DESCRIPTOR"
  "RESULT_L2CAP_CONN_BLUETOOTH_OFF"
  "RESULT_L2CAP_CONN_BLUETOOTH_SOCKET_CONNECTION_CLOSED"
  "RESULT_L2CAP_CONN_BLUETOOTH_SOCKET_CONNECTION_FAILED"
  "RESULT_L2CAP_CONN_BLUETOOTH_UNABLE_TO_SEND_RPC"
  "RESULT_L2CAP_CONN_CL_SEC_FAILURE"
  "RESULT_L2CAP_CONN_INSUFFICIENT_AUTHENTICATION"
  "RESULT_L2CAP_CONN_INSUFFICIENT_AUTHORIZATION"
  "RESULT_L2CAP_CONN_INSUFFICIENT_ENCRYP"
  "RESULT_L2CAP_CONN_INSUFFICIENT_ENCRYP_KEY_SIZE"
  "RESULT_L2CAP_CONN_INVALID_PARAMETERS"
  "RESULT_L2CAP_CONN_INVALID_SOURCE_CID"
  "RESULT_L2CAP_CONN_NO_PSM"
  "RESULT_L2CAP_CONN_NO_RESOURCES"
  "RESULT_L2CAP_CONN_SERVER_FAILURE"
  "RESULT_L2CAP_CONN_SOURCE_CID_ALREADY_ALLOCATED"
  "RESULT_L2CAP_CONN_SUCCESS"
  "RESULT_L2CAP_CONN_TIMEOUT"
  "RESULT_L2CAP_CONN_UNACCEPTABLE_PARAMETERS"
  "RESULT_L2CAP_CONN_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry L2capCocConnectionResult_entries[] = {
  { {L2capCocConnectionResult_names + 0, 29}, 2 },
  { {L2capCocConnectionResult_names + 29, 53}, 1004 },
  { {L2capCocConnectionResult_names + 82, 49}, 1003 },
  { {L2capCocConnectionResult_names + 131, 48}, 1005 },
  { {L2capCocConnectionResult_names + 179, 31}, 15 },
  { {L2capCocConnectionResult_names + 210, 52}, 1001 },
  { {L2capCocConnectionResult_names + 262, 52}, 1000 },
  { {L2capCocConnectionResult_names + 314, 46}, 1002 },
  { {L2capCocConnectionResult_names + 360, 32}, 3 },
  { {L2capCocConnectionResult_names + 392, 45}, 4 },
  { {L2capCocConnectionResult_names + 437, 44}, 5 },
  { {L2capCocConnectionResult_names + 481, 37}, 7 },
  { {L2capCocConnectionResult_names + 518, 46}, 6 },
  { {L2capCocConnectionResult_names + 564, 36}, 11 },
  { {L2capCocConnectionResult_names + 600, 36}, 8 },
  { {L2capCocConnectionResult_names + 636, 24}, 13 },
  { {L2capCocConnectionResult_names + 660, 30}, 12 },
  { {L2capCocConnectionResult_names + 690, 32}, 2000 },
  { {L2capCocConnectionResult_names + 722, 46}, 9 },
  { {L2capCocConnectionResult_names + 768, 25}, 1 },
  { {L2capCocConnectionResult_names + 793, 25}, 14 },
  { {L2capCocConnectionResult_names + 818, 41}, 10 },
  { {L2capCocConnectionResult_names + 859, 25}, 0 },
};

static const int L2capCocConnectionResult_entries_by_number[] = {
  22, // 0 -> RESULT_L2CAP_CONN_UNKNOWN
  19, // 1 -> RESULT_L2CAP_CONN_SUCCESS
  0, // 2 -> RESULT_L2CAP_CONN_ACL_FAILURE
  8, // 3 -> RESULT_L2CAP_CONN_CL_SEC_FAILURE
  9, // 4 -> RESULT_L2CAP_CONN_INSUFFICIENT_AUTHENTICATION
  10, // 5 -> RESULT_L2CAP_CONN_INSUFFICIENT_AUTHORIZATION
  12, // 6 -> RESULT_L2CAP_CONN_INSUFFICIENT_ENCRYP_KEY_SIZE
  11, // 7 -> RESULT_L2CAP_CONN_INSUFFICIENT_ENCRYP
  14, // 8 -> RESULT_L2CAP_CONN_INVALID_SOURCE_CID
  18, // 9 -> RESULT_L2CAP_CONN_SOURCE_CID_ALREADY_ALLOCATED
  21, // 10 -> RESULT_L2CAP_CONN_UNACCEPTABLE_PARAMETERS
  13, // 11 -> RESULT_L2CAP_CONN_INVALID_PARAMETERS
  16, // 12 -> RESULT_L2CAP_CONN_NO_RESOURCES
  15, // 13 -> RESULT_L2CAP_CONN_NO_PSM
  20, // 14 -> RESULT_L2CAP_CONN_TIMEOUT
  4, // 15 -> RESULT_L2CAP_CONN_BLUETOOTH_OFF
  6, // 1000 -> RESULT_L2CAP_CONN_BLUETOOTH_SOCKET_CONNECTION_FAILED
  5, // 1001 -> RESULT_L2CAP_CONN_BLUETOOTH_SOCKET_CONNECTION_CLOSED
  7, // 1002 -> RESULT_L2CAP_CONN_BLUETOOTH_UNABLE_TO_SEND_RPC
  2, // 1003 -> RESULT_L2CAP_CONN_BLUETOOTH_NULL_BLUETOOTH_DEVICE
  1, // 1004 -> RESULT_L2CAP_CONN_BLUETOOTH_GET_SOCKET_MANAGER_FAILED
  3, // 1005 -> RESULT_L2CAP_CONN_BLUETOOTH_NULL_FILE_DESCRIPTOR
  17, // 2000 -> RESULT_L2CAP_CONN_SERVER_FAILURE
};

const std::string& L2capCocConnectionResult_Name(
    L2capCocConnectionResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          L2capCocConnectionResult_entries,
          L2capCocConnectionResult_entries_by_number,
          23, L2capCocConnectionResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      L2capCocConnectionResult_entries,
      L2capCocConnectionResult_entries_by_number,
      23, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     L2capCocConnectionResult_strings[idx].get();
}
bool L2capCocConnectionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, L2capCocConnectionResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      L2capCocConnectionResult_entries, 23, name, &int_value);
  if (success) {
    *value = static_cast<L2capCocConnectionResult>(int_value);
  }
  return success;
}
bool CodePathCounterKeyEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 100000:
    case 100001:
    case 100002:
    case 100003:
    case 100004:
    case 100005:
    case 100006:
    case 100007:
    case 100008:
    case 100009:
    case 100010:
    case 100011:
    case 100012:
    case 100013:
    case 100100:
    case 100101:
    case 100102:
    case 100103:
    case 100104:
    case 100105:
    case 100106:
    case 100107:
    case 100108:
    case 100109:
    case 100110:
    case 100111:
    case 100112:
    case 101000:
    case 101001:
    case 101002:
    case 101003:
    case 101004:
    case 101005:
    case 101006:
    case 101007:
    case 101008:
    case 101101:
    case 101102:
    case 101103:
    case 101104:
    case 102000:
    case 102001:
    case 102002:
    case 102003:
    case 102004:
    case 102005:
    case 102006:
    case 102007:
    case 102008:
    case 102009:
    case 103001:
    case 103002:
    case 103003:
    case 103004:
    case 103005:
    case 103006:
    case 103007:
    case 103008:
    case 103009:
    case 103010:
    case 103011:
    case 103012:
    case 103013:
    case 103014:
    case 103015:
    case 103016:
    case 103017:
    case 103018:
    case 103019:
    case 103020:
    case 103021:
    case 103022:
    case 103023:
    case 103024:
    case 103025:
    case 103026:
    case 103027:
    case 103028:
    case 103101:
    case 103102:
    case 103103:
    case 103104:
    case 103105:
    case 103106:
    case 103107:
    case 103108:
    case 103109:
    case 103110:
    case 103111:
    case 103112:
    case 103113:
    case 103114:
    case 103115:
    case 103116:
    case 103117:
    case 103118:
    case 103119:
    case 103120:
    case 103121:
    case 103122:
    case 103123:
    case 103124:
    case 103125:
    case 103126:
    case 103127:
    case 103128:
    case 103129:
    case 120000:
    case 120001:
    case 120002:
    case 120003:
    case 120004:
    case 120005:
    case 120006:
    case 120007:
    case 120008:
    case 120009:
    case 120100:
    case 120101:
    case 120102:
    case 120103:
    case 120104:
    case 120105:
    case 120106:
    case 120107:
    case 120108:
    case 120109:
    case 120200:
    case 120201:
    case 120202:
    case 120203:
    case 120204:
    case 120205:
    case 120206:
    case 120250:
    case 120251:
    case 120252:
    case 120253:
    case 120254:
    case 120255:
    case 120256:
    case 120257:
    case 120258:
    case 120259:
    case 120260:
    case 120261:
    case 120262:
    case 120263:
    case 120300:
    case 120301:
    case 120302:
    case 120303:
    case 120304:
    case 120305:
    case 120306:
    case 120307:
    case 120308:
    case 120309:
    case 120400:
    case 120401:
    case 120402:
    case 120500:
    case 120501:
    case 120502:
    case 120503:
    case 120504:
    case 120505:
    case 120600:
    case 120601:
    case 120602:
    case 120603:
    case 120700:
    case 120701:
    case 120702:
    case 120703:
    case 120704:
    case 120705:
    case 120706:
    case 120707:
    case 120708:
    case 120709:
    case 120710:
    case 120711:
    case 120712:
    case 120713:
    case 120714:
    case 120800:
    case 120900:
    case 120901:
    case 120902:
    case 120903:
    case 120904:
    case 120905:
    case 120906:
    case 120907:
    case 120908:
    case 120909:
    case 121000:
    case 121001:
    case 121100:
    case 121101:
    case 121102:
    case 121103:
    case 121104:
    case 121105:
    case 121106:
    case 121107:
    case 121108:
    case 121109:
    case 121110:
    case 121111:
    case 121112:
    case 121113:
    case 121114:
    case 121115:
    case 121116:
    case 121117:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CodePathCounterKeyEnum_strings[218] = {};

static const char CodePathCounterKeyEnum_names[] =
  "A2DP_ALREADY_CONNECTING"
  "A2DP_CONNECTION_ACL_DISCONNECTED"
  "A2DP_CONNECTION_CLOSE"
  "A2DP_CONNECTION_DISCONNECTED"
  "A2DP_CONNECTION_FAILURE"
  "A2DP_CONNECTION_REJECT_EVT"
  "A2DP_CONNECTION_SUCCESS"
  "A2DP_CONNECTION_TIMEOUT"
  "A2DP_CONNECTION_UNKNOWN_EVENT"
  "A2DP_OFFLOAD_START_REQ_FAILURE"
  "GATT_CLIENT_CONNECT_IS_AUTOCONNECT"
  "GATT_CLIENT_CONNECT_IS_AUTOCONNECT_IN_FOREGROUND"
  "GATT_CLIENT_CONNECT_IS_AUTOCONNECT_NOT_IN_FOREGROUND"
  "GATT_CLIENT_CONNECT_IS_DIRECT"
  "GATT_CLIENT_CONNECT_IS_DIRECT_IN_FOREGROUND"
  "GATT_CLIENT_CONNECT_IS_DIRECT_NOT_IN_FOREGROUND"
  "GATT_SERVER_CONNECT_IS_AUTOCONNECT_IN_FOREGROUND"
  "GATT_SERVER_CONNECT_IS_AUTOCONNECT_NOT_IN_FOREGROUND"
  "GATT_SERVER_CONNECT_IS_DIRECT_IN_FOREGROUND"
  "GATT_SERVER_CONNECT_IS_DIRECT_NOT_IN_FOREGROUND"
  "HFP_COLLISON_AT_AG_OPEN"
  "HFP_COLLISON_AT_CONNECTING"
  "HFP_SELF_INITIATED_AG_FAILED"
  "HFP_SLC_SETUP_FAILED"
  "HIDD_ERR_ALREADY_CONN"
  "HIDD_ERR_ALREADY_REGISTERED"
  "HIDD_ERR_CONGESTED_AT_DATA_WRITE"
  "HIDD_ERR_CONGESTED_AT_FLAG_CHECK"
  "HIDD_ERR_CONN_IN_PROCESS"
  "HIDD_ERR_DEVICE_NOT_IN_USE_AT_CONNECT"
  "HIDD_ERR_DEVICE_NOT_IN_USE_AT_DISCONNECT"
  "HIDD_ERR_DISCONNECTING"
  "HIDD_ERR_HOST_CALLBACK_NULL"
  "HIDD_ERR_INVALID_PARAM"
  "HIDD_ERR_INVALID_PARAM_SEND_REPORT"
  "HIDD_ERR_L2CAP_FAILED_CONTROL"
  "HIDD_ERR_L2CAP_FAILED_INITIATE"
  "HIDD_ERR_L2CAP_FAILED_INTERRUPT"
  "HIDD_ERR_L2CAP_NOT_STARTED_INCOMING"
  "HIDD_ERR_NOT_REGISTERED_AT_CONNECT"
  "HIDD_ERR_NOT_REGISTERED_AT_DEREGISTER"
  "HIDD_ERR_NOT_REGISTERED_AT_DISCONNECT"
  "HIDD_ERR_NOT_REGISTERED_AT_GET_DEVICE"
  "HIDD_ERR_NOT_REGISTERED_AT_INITIATE"
  "HIDD_ERR_NOT_REGISTERED_AT_SDP"
  "HIDD_ERR_NOT_REGISTERED_DUE_TO_BUFFER_ALLOCATION"
  "HIDD_ERR_NOT_REGISTERED_DUE_TO_DESCRIPTOR_LENGTH"
  "HIDD_ERR_NO_CONNECTION_AT_DISCONNECT"
  "HIDD_ERR_NO_CONNECTION_AT_SEND_DATA"
  "HIDD_ERR_NO_RESOURCES"
  "HIDD_REGISTER_DESCRIPTOR_MALFORMED"
  "HIDH_COUNT_CONNECTION_POLICY_DISABLED"
  "HIDH_COUNT_CONNECT_REQ_WHEN_MAX_DEVICE_LIMIT_REACHED"
  "HIDH_COUNT_INCOMING_CONNECTION_REJECTED"
  "HIDH_COUNT_MAX_ADDED_DEVICE_LIMIT_REACHED"
  "HIDH_COUNT_SUPPORT_BOTH_HID_AND_HOGP"
  "HIDH_COUNT_SUPPORT_ONLY_HID_OR_HOGP"
  "HIDH_COUNT_VIRTUAL_UNPLUG_REQUESTED_BY_REMOTE_DEVICE"
  "HIDH_COUNT_WRONG_REPORT_TYPE"
  "HIDH_ERR_ALREADY_CONN"
  "HIDH_ERR_ALREADY_REGISTERED"
  "HIDH_ERR_AUTH_FAILED"
  "HIDH_ERR_CONGESTED_AT_FLAG_CHECK"
  "HIDH_ERR_CONGESTED_AT_SEND_DATA"
  "HIDH_ERR_CONN_IN_PROCESS"
  "HIDH_ERR_INVALID_PARAM_AT_HOST_CLOSE_DEV"
  "HIDH_ERR_INVALID_PARAM_AT_HOST_OPEN_DEV"
  "HIDH_ERR_INVALID_PARAM_AT_HOST_REGISTER"
  "HIDH_ERR_INVALID_PARAM_AT_HOST_REMOVE_DEV"
  "HIDH_ERR_INVALID_PARAM_AT_HOST_WRITE_DEV"
  "HIDH_ERR_INVALID_PARAM_AT_SEND_DATA"
  "HIDH_ERR_L2CAP_FAILED_AT_INITIATE"
  "HIDH_ERR_L2CAP_FAILED_AT_REGISTER_CONTROL"
  "HIDH_ERR_L2CAP_FAILED_AT_REGISTER_INTERRUPT"
  "HIDH_ERR_NO_CONNECTION_AT_HOST_CLOSE_DEV"
  "HIDH_ERR_NO_CONNECTION_AT_HOST_WRITE_DEV"
  "HIDH_ERR_NO_CONNECTION_AT_SEND_DATA"
  "HIDH_ERR_NO_RESOURCES_ADD_DEVICE"
  "HIDH_ERR_NO_RESOURCES_SDP"
  "HIDH_ERR_SDP_BUSY"
  "HID_PLUG_FAILURE"
  "KEY_UNKNOWN"
  "L2CAP_CONFIG_REQ_FAILURE"
  "L2CAP_CONFIG_RSP_NEG"
  "L2CAP_CONNECT_CONFIRM_NEG"
  "L2CAP_CONNECT_RSP_NEG"
  "L2CAP_CONN_OTHER_ERROR_AT_CONNECT_RSP"
  "L2CAP_CREDIT_BASED_CONNECT_RSP_NEG"
  "L2CAP_INFO_NO_COMPATIBLE_CHANNEL_AT_RSP"
  "L2CAP_NO_COMPATIBLE_CHANNEL_AT_CSM_CLOSED"
  "L2CAP_NO_COMPATIBLE_CHANNEL_AT_W4_SEC"
  "L2CAP_SECURITY_NEG_AT_CSM_CLOSED"
  "L2CAP_SECURITY_NEG_AT_W4_SEC"
  "L2CAP_SUCCESS"
  "L2CAP_TIMEOUT_AT_CONNECT_RSP"
  "L2CAP_TIMEOUT_AT_CSM_CLOSED"
  "LE_ADV_COUNT_CONNECTABLE_DISABLE"
  "LE_ADV_COUNT_CONNECTABLE_ENABLE"
  "LE_ADV_COUNT_DISABLE"
  "LE_ADV_COUNT_ENABLE"
  "LE_ADV_COUNT_PERIODIC_DISABLE"
  "LE_ADV_COUNT_PERIODIC_ENABLE"
  "LE_ADV_DURATION_COUNT_CONNECTABLE_1H"
  "LE_ADV_DURATION_COUNT_CONNECTABLE_1M"
  "LE_ADV_DURATION_COUNT_CONNECTABLE_30M"
  "LE_ADV_DURATION_COUNT_CONNECTABLE_3H"
  "LE_ADV_DURATION_COUNT_CONNECTABLE_3HP"
  "LE_ADV_DURATION_COUNT_PERIODIC_1H"
  "LE_ADV_DURATION_COUNT_PERIODIC_1M"
  "LE_ADV_DURATION_COUNT_PERIODIC_30M"
  "LE_ADV_DURATION_COUNT_PERIODIC_3H"
  "LE_ADV_DURATION_COUNT_PERIODIC_3HP"
  "LE_ADV_DURATION_COUNT_TOTAL_1H"
  "LE_ADV_DURATION_COUNT_TOTAL_1M"
  "LE_ADV_DURATION_COUNT_TOTAL_30M"
  "LE_ADV_DURATION_COUNT_TOTAL_3H"
  "LE_ADV_DURATION_COUNT_TOTAL_3HP"
  "LE_ADV_ERROR_ON_START_COUNT"
  "LE_ADV_INSTANCE_COUNT_10"
  "LE_ADV_INSTANCE_COUNT_15"
  "LE_ADV_INSTANCE_COUNT_15P"
  "LE_ADV_INSTANCE_COUNT_5"
  "LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD"
  "LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_CSIS"
  "LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_DB"
  "LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_GOOD"
  "LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD"
  "LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_CIS_FAILED"
  "LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_SIGNALING_FAILED"
  "LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_GOOD"
  "LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_TRENDING_BAD"
  "LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD"
  "LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_CSIS"
  "LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_DB"
  "LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_GOOD"
  "LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD"
  "LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_CIS_FAILED"
  "LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_SIGNALING_FAILED"
  "LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_GOOD"
  "LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_TRENDING_BAD"
  "LE_SCAN_ABUSE_COUNT_HW_FILTER_NOT_AVAILABLE"
  "LE_SCAN_ABUSE_COUNT_SCAN_TIMEOUT"
  "LE_SCAN_ABUSE_COUNT_TRACKING_HW_FILTER_NOT_AVAILABLE"
  "LE_SCAN_COUNT_AUTO_BATCH_DISABLE"
  "LE_SCAN_COUNT_AUTO_BATCH_ENABLE"
  "LE_SCAN_COUNT_BATCH_DISABLE"
  "LE_SCAN_COUNT_BATCH_ENABLE"
  "LE_SCAN_COUNT_FILTERED_DISABLE"
  "LE_SCAN_COUNT_FILTERED_ENABLE"
  "LE_SCAN_COUNT_TOTAL_DISABLE"
  "LE_SCAN_COUNT_TOTAL_ENABLE"
  "LE_SCAN_COUNT_UNFILTERED_DISABLE"
  "LE_SCAN_COUNT_UNFILTERED_ENABLE"
  "LE_SCAN_DURATION_COUNT_BATCH_10M"
  "LE_SCAN_DURATION_COUNT_BATCH_10S"
  "LE_SCAN_DURATION_COUNT_BATCH_1H"
  "LE_SCAN_DURATION_COUNT_BATCH_1HP"
  "LE_SCAN_DURATION_COUNT_BATCH_1M"
  "LE_SCAN_DURATION_COUNT_REGULAR_10M"
  "LE_SCAN_DURATION_COUNT_REGULAR_10S"
  "LE_SCAN_DURATION_COUNT_REGULAR_1H"
  "LE_SCAN_DURATION_COUNT_REGULAR_1HP"
  "LE_SCAN_DURATION_COUNT_REGULAR_1M"
  "LE_SCAN_RADIO_DURATION_ALL"
  "LE_SCAN_RADIO_DURATION_BATCH"
  "LE_SCAN_RADIO_DURATION_BATCH_SCREEN_OFF"
  "LE_SCAN_RADIO_DURATION_BATCH_SCREEN_ON"
  "LE_SCAN_RADIO_DURATION_REGULAR"
  "LE_SCAN_RADIO_DURATION_REGULAR_SCREEN_OFF"
  "LE_SCAN_RADIO_DURATION_REGULAR_SCREEN_ON"
  "LE_SCAN_RADIO_SCAN_MODE_AMBIENT_DISCOVERY_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_AMBIENT_DISCOVERY_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_BALANCED_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_BALANCED_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_LOW_LATENCY_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_LOW_LATENCY_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_LOW_POWER_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_LOW_POWER_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_OPPORTUNISTIC_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_OPPORTUNISTIC_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_BALANCED_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_BALANCED_COUNT_SCREEN_OFF"
  "LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_COUNT"
  "LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_COUNT_SCREEN_OFF"
  "LE_SCAN_RESULTS_COUNT_ALL"
  "LE_SCAN_RESULTS_COUNT_BATCH"
  "LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE"
  "LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE_SCREEN_OFF"
  "LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE_SCREEN_ON"
  "LE_SCAN_RESULTS_COUNT_BATCH_SCREEN_OFF"
  "LE_SCAN_RESULTS_COUNT_BATCH_SCREEN_ON"
  "LE_SCAN_RESULTS_COUNT_REGULAR"
  "LE_SCAN_RESULTS_COUNT_REGULAR_SCREEN_OFF"
  "LE_SCAN_RESULTS_COUNT_REGULAR_SCREEN_ON"
  "RFCOMM_CONNECTION_SUCCESS_CNF"
  "RFCOMM_CONNECTION_SUCCESS_IND"
  "RFCOMM_PORT_CLOSED"
  "RFCOMM_PORT_NEG_FAILED"
  "RFCOMM_PORT_PEER_CONNECTION_FAILED"
  "RFCOMM_PORT_PEER_TIMEOUT"
  "RFCOMM_PORT_START_CLOSE"
  "RFCOMM_PORT_START_CNF_FAILED"
  "RFCOMM_PORT_START_FAILED"
  "SCREEN_OFF_EVENT"
  "SCREEN_ON_EVENT"
  "SDP_ADD_UUID_WITH_INTENT"
  "SDP_ADD_UUID_WITH_NO_INTENT"
  "SDP_DROP_UUID"
  "SDP_FAILURE"
  "SDP_FETCH_UUID_REQUEST"
  "SDP_FETCH_UUID_SKIP_ALREADY_BONDED"
  "SDP_FETCH_UUID_SKIP_ALREADY_CACHED"
  "SDP_INVOKE_SDP_CYCLE"
  "SDP_NOT_SENDING_DELAYED_UUID"
  "SDP_SENDING_DELAYED_UUID"
  "SDP_SENT_UUID"
  "SDP_SUCCESS"
  "SDP_UUIDS_EQUAL_SKIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CodePathCounterKeyEnum_entries[] = {
  { {CodePathCounterKeyEnum_names + 0, 23}, 102005 },
  { {CodePathCounterKeyEnum_names + 23, 32}, 102001 },
  { {CodePathCounterKeyEnum_names + 55, 21}, 102007 },
  { {CodePathCounterKeyEnum_names + 76, 28}, 102008 },
  { {CodePathCounterKeyEnum_names + 104, 23}, 102003 },
  { {CodePathCounterKeyEnum_names + 127, 26}, 102002 },
  { {CodePathCounterKeyEnum_names + 153, 23}, 102000 },
  { {CodePathCounterKeyEnum_names + 176, 23}, 102009 },
  { {CodePathCounterKeyEnum_names + 199, 29}, 102004 },
  { {CodePathCounterKeyEnum_names + 228, 30}, 102006 },
  { {CodePathCounterKeyEnum_names + 258, 34}, 120901 },
  { {CodePathCounterKeyEnum_names + 292, 48}, 120904 },
  { {CodePathCounterKeyEnum_names + 340, 52}, 120905 },
  { {CodePathCounterKeyEnum_names + 392, 29}, 120900 },
  { {CodePathCounterKeyEnum_names + 421, 43}, 120902 },
  { {CodePathCounterKeyEnum_names + 464, 47}, 120903 },
  { {CodePathCounterKeyEnum_names + 511, 48}, 120908 },
  { {CodePathCounterKeyEnum_names + 559, 52}, 120909 },
  { {CodePathCounterKeyEnum_names + 611, 43}, 120906 },
  { {CodePathCounterKeyEnum_names + 654, 47}, 120907 },
  { {CodePathCounterKeyEnum_names + 701, 23}, 101101 },
  { {CodePathCounterKeyEnum_names + 724, 26}, 101102 },
  { {CodePathCounterKeyEnum_names + 750, 28}, 101103 },
  { {CodePathCounterKeyEnum_names + 778, 20}, 101104 },
  { {CodePathCounterKeyEnum_names + 798, 21}, 103011 },
  { {CodePathCounterKeyEnum_names + 819, 27}, 103028 },
  { {CodePathCounterKeyEnum_names + 846, 32}, 103008 },
  { {CodePathCounterKeyEnum_names + 878, 32}, 103009 },
  { {CodePathCounterKeyEnum_names + 910, 24}, 103010 },
  { {CodePathCounterKeyEnum_names + 934, 37}, 103019 },
  { {CodePathCounterKeyEnum_names + 971, 40}, 103020 },
  { {CodePathCounterKeyEnum_names + 1011, 22}, 103012 },
  { {CodePathCounterKeyEnum_names + 1033, 27}, 103017 },
  { {CodePathCounterKeyEnum_names + 1060, 22}, 103007 },
  { {CodePathCounterKeyEnum_names + 1082, 34}, 103018 },
  { {CodePathCounterKeyEnum_names + 1116, 29}, 103015 },
  { {CodePathCounterKeyEnum_names + 1145, 30}, 103014 },
  { {CodePathCounterKeyEnum_names + 1175, 31}, 103016 },
  { {CodePathCounterKeyEnum_names + 1206, 35}, 103013 },
  { {CodePathCounterKeyEnum_names + 1241, 34}, 103021 },
  { {CodePathCounterKeyEnum_names + 1275, 37}, 103024 },
  { {CodePathCounterKeyEnum_names + 1312, 37}, 103022 },
  { {CodePathCounterKeyEnum_names + 1349, 37}, 103023 },
  { {CodePathCounterKeyEnum_names + 1386, 35}, 103003 },
  { {CodePathCounterKeyEnum_names + 1421, 30}, 103027 },
  { {CodePathCounterKeyEnum_names + 1451, 48}, 103026 },
  { {CodePathCounterKeyEnum_names + 1499, 48}, 103025 },
  { {CodePathCounterKeyEnum_names + 1547, 36}, 103006 },
  { {CodePathCounterKeyEnum_names + 1583, 35}, 103005 },
  { {CodePathCounterKeyEnum_names + 1618, 21}, 103004 },
  { {CodePathCounterKeyEnum_names + 1639, 34}, 103002 },
  { {CodePathCounterKeyEnum_names + 1673, 37}, 103127 },
  { {CodePathCounterKeyEnum_names + 1710, 52}, 103124 },
  { {CodePathCounterKeyEnum_names + 1762, 39}, 103126 },
  { {CodePathCounterKeyEnum_names + 1801, 41}, 103122 },
  { {CodePathCounterKeyEnum_names + 1842, 36}, 103128 },
  { {CodePathCounterKeyEnum_names + 1878, 35}, 103129 },
  { {CodePathCounterKeyEnum_names + 1913, 52}, 103123 },
  { {CodePathCounterKeyEnum_names + 1965, 28}, 103125 },
  { {CodePathCounterKeyEnum_names + 1993, 21}, 103116 },
  { {CodePathCounterKeyEnum_names + 2014, 27}, 103101 },
  { {CodePathCounterKeyEnum_names + 2041, 20}, 103120 },
  { {CodePathCounterKeyEnum_names + 2061, 32}, 103114 },
  { {CodePathCounterKeyEnum_names + 2093, 31}, 103113 },
  { {CodePathCounterKeyEnum_names + 2124, 24}, 103115 },
  { {CodePathCounterKeyEnum_names + 2148, 40}, 103111 },
  { {CodePathCounterKeyEnum_names + 2188, 39}, 103110 },
  { {CodePathCounterKeyEnum_names + 2227, 39}, 103108 },
  { {CodePathCounterKeyEnum_names + 2266, 41}, 103109 },
  { {CodePathCounterKeyEnum_names + 2307, 40}, 103112 },
  { {CodePathCounterKeyEnum_names + 2347, 35}, 103107 },
  { {CodePathCounterKeyEnum_names + 2382, 33}, 103117 },
  { {CodePathCounterKeyEnum_names + 2415, 41}, 103118 },
  { {CodePathCounterKeyEnum_names + 2456, 43}, 103119 },
  { {CodePathCounterKeyEnum_names + 2499, 40}, 103106 },
  { {CodePathCounterKeyEnum_names + 2539, 40}, 103105 },
  { {CodePathCounterKeyEnum_names + 2579, 35}, 103104 },
  { {CodePathCounterKeyEnum_names + 2614, 32}, 103103 },
  { {CodePathCounterKeyEnum_names + 2646, 25}, 103102 },
  { {CodePathCounterKeyEnum_names + 2671, 17}, 103121 },
  { {CodePathCounterKeyEnum_names + 2688, 16}, 103001 },
  { {CodePathCounterKeyEnum_names + 2704, 11}, 0 },
  { {CodePathCounterKeyEnum_names + 2715, 24}, 100008 },
  { {CodePathCounterKeyEnum_names + 2739, 20}, 100009 },
  { {CodePathCounterKeyEnum_names + 2759, 25}, 100001 },
  { {CodePathCounterKeyEnum_names + 2784, 21}, 100006 },
  { {CodePathCounterKeyEnum_names + 2805, 37}, 100013 },
  { {CodePathCounterKeyEnum_names + 2842, 34}, 100005 },
  { {CodePathCounterKeyEnum_names + 2876, 39}, 100007 },
  { {CodePathCounterKeyEnum_names + 2915, 41}, 100002 },
  { {CodePathCounterKeyEnum_names + 2956, 37}, 100010 },
  { {CodePathCounterKeyEnum_names + 2993, 32}, 100003 },
  { {CodePathCounterKeyEnum_names + 3025, 28}, 100011 },
  { {CodePathCounterKeyEnum_names + 3053, 13}, 100000 },
  { {CodePathCounterKeyEnum_names + 3066, 28}, 100012 },
  { {CodePathCounterKeyEnum_names + 3094, 27}, 100004 },
  { {CodePathCounterKeyEnum_names + 3121, 32}, 120503 },
  { {CodePathCounterKeyEnum_names + 3153, 31}, 120502 },
  { {CodePathCounterKeyEnum_names + 3184, 20}, 120501 },
  { {CodePathCounterKeyEnum_names + 3204, 19}, 120500 },
  { {CodePathCounterKeyEnum_names + 3223, 29}, 120505 },
  { {CodePathCounterKeyEnum_names + 3252, 28}, 120504 },
  { {CodePathCounterKeyEnum_names + 3280, 36}, 120707 },
  { {CodePathCounterKeyEnum_names + 3316, 36}, 120705 },
  { {CodePathCounterKeyEnum_names + 3352, 37}, 120706 },
  { {CodePathCounterKeyEnum_names + 3389, 36}, 120708 },
  { {CodePathCounterKeyEnum_names + 3425, 37}, 120709 },
  { {CodePathCounterKeyEnum_names + 3462, 33}, 120712 },
  { {CodePathCounterKeyEnum_names + 3495, 33}, 120710 },
  { {CodePathCounterKeyEnum_names + 3528, 34}, 120711 },
  { {CodePathCounterKeyEnum_names + 3562, 33}, 120713 },
  { {CodePathCounterKeyEnum_names + 3595, 34}, 120714 },
  { {CodePathCounterKeyEnum_names + 3629, 30}, 120702 },
  { {CodePathCounterKeyEnum_names + 3659, 30}, 120700 },
  { {CodePathCounterKeyEnum_names + 3689, 31}, 120701 },
  { {CodePathCounterKeyEnum_names + 3720, 30}, 120703 },
  { {CodePathCounterKeyEnum_names + 3750, 31}, 120704 },
  { {CodePathCounterKeyEnum_names + 3781, 27}, 120800 },
  { {CodePathCounterKeyEnum_names + 3808, 24}, 120601 },
  { {CodePathCounterKeyEnum_names + 3832, 24}, 120602 },
  { {CodePathCounterKeyEnum_names + 3856, 25}, 120603 },
  { {CodePathCounterKeyEnum_names + 3881, 23}, 120600 },
  { {CodePathCounterKeyEnum_names + 3904, 43}, 121101 },
  { {CodePathCounterKeyEnum_names + 3947, 56}, 121103 },
  { {CodePathCounterKeyEnum_names + 4003, 54}, 121102 },
  { {CodePathCounterKeyEnum_names + 4057, 44}, 121100 },
  { {CodePathCounterKeyEnum_names + 4101, 42}, 121110 },
  { {CodePathCounterKeyEnum_names + 4143, 58}, 121111 },
  { {CodePathCounterKeyEnum_names + 4201, 64}, 121112 },
  { {CodePathCounterKeyEnum_names + 4265, 43}, 121108 },
  { {CodePathCounterKeyEnum_names + 4308, 51}, 121109 },
  { {CodePathCounterKeyEnum_names + 4359, 46}, 121105 },
  { {CodePathCounterKeyEnum_names + 4405, 59}, 121107 },
  { {CodePathCounterKeyEnum_names + 4464, 57}, 121106 },
  { {CodePathCounterKeyEnum_names + 4521, 47}, 121104 },
  { {CodePathCounterKeyEnum_names + 4568, 45}, 121115 },
  { {CodePathCounterKeyEnum_names + 4613, 61}, 121116 },
  { {CodePathCounterKeyEnum_names + 4674, 67}, 121117 },
  { {CodePathCounterKeyEnum_names + 4741, 46}, 121113 },
  { {CodePathCounterKeyEnum_names + 4787, 54}, 121114 },
  { {CodePathCounterKeyEnum_names + 4841, 43}, 120401 },
  { {CodePathCounterKeyEnum_names + 4884, 32}, 120400 },
  { {CodePathCounterKeyEnum_names + 4916, 52}, 120402 },
  { {CodePathCounterKeyEnum_names + 4968, 32}, 120009 },
  { {CodePathCounterKeyEnum_names + 5000, 31}, 120008 },
  { {CodePathCounterKeyEnum_names + 5031, 27}, 120007 },
  { {CodePathCounterKeyEnum_names + 5058, 26}, 120006 },
  { {CodePathCounterKeyEnum_names + 5084, 30}, 120003 },
  { {CodePathCounterKeyEnum_names + 5114, 29}, 120002 },
  { {CodePathCounterKeyEnum_names + 5143, 27}, 120001 },
  { {CodePathCounterKeyEnum_names + 5170, 26}, 120000 },
  { {CodePathCounterKeyEnum_names + 5196, 32}, 120005 },
  { {CodePathCounterKeyEnum_names + 5228, 31}, 120004 },
  { {CodePathCounterKeyEnum_names + 5259, 32}, 120107 },
  { {CodePathCounterKeyEnum_names + 5291, 32}, 120105 },
  { {CodePathCounterKeyEnum_names + 5323, 31}, 120108 },
  { {CodePathCounterKeyEnum_names + 5354, 32}, 120109 },
  { {CodePathCounterKeyEnum_names + 5386, 31}, 120106 },
  { {CodePathCounterKeyEnum_names + 5417, 34}, 120102 },
  { {CodePathCounterKeyEnum_names + 5451, 34}, 120100 },
  { {CodePathCounterKeyEnum_names + 5485, 33}, 120103 },
  { {CodePathCounterKeyEnum_names + 5518, 34}, 120104 },
  { {CodePathCounterKeyEnum_names + 5552, 33}, 120101 },
  { {CodePathCounterKeyEnum_names + 5585, 26}, 120200 },
  { {CodePathCounterKeyEnum_names + 5611, 28}, 120202 },
  { {CodePathCounterKeyEnum_names + 5639, 39}, 120206 },
  { {CodePathCounterKeyEnum_names + 5678, 38}, 120205 },
  { {CodePathCounterKeyEnum_names + 5716, 30}, 120201 },
  { {CodePathCounterKeyEnum_names + 5746, 41}, 120204 },
  { {CodePathCounterKeyEnum_names + 5787, 40}, 120203 },
  { {CodePathCounterKeyEnum_names + 5827, 47}, 120254 },
  { {CodePathCounterKeyEnum_names + 5874, 58}, 120261 },
  { {CodePathCounterKeyEnum_names + 5932, 38}, 120252 },
  { {CodePathCounterKeyEnum_names + 5970, 49}, 120259 },
  { {CodePathCounterKeyEnum_names + 6019, 41}, 120253 },
  { {CodePathCounterKeyEnum_names + 6060, 52}, 120260 },
  { {CodePathCounterKeyEnum_names + 6112, 39}, 120251 },
  { {CodePathCounterKeyEnum_names + 6151, 50}, 120258 },
  { {CodePathCounterKeyEnum_names + 6201, 43}, 120250 },
  { {CodePathCounterKeyEnum_names + 6244, 54}, 120257 },
  { {CodePathCounterKeyEnum_names + 6298, 49}, 120256 },
  { {CodePathCounterKeyEnum_names + 6347, 60}, 120263 },
  { {CodePathCounterKeyEnum_names + 6407, 40}, 120255 },
  { {CodePathCounterKeyEnum_names + 6447, 51}, 120262 },
  { {CodePathCounterKeyEnum_names + 6498, 25}, 120300 },
  { {CodePathCounterKeyEnum_names + 6523, 27}, 120302 },
  { {CodePathCounterKeyEnum_names + 6550, 34}, 120307 },
  { {CodePathCounterKeyEnum_names + 6584, 45}, 120309 },
  { {CodePathCounterKeyEnum_names + 6629, 44}, 120308 },
  { {CodePathCounterKeyEnum_names + 6673, 38}, 120306 },
  { {CodePathCounterKeyEnum_names + 6711, 37}, 120305 },
  { {CodePathCounterKeyEnum_names + 6748, 29}, 120301 },
  { {CodePathCounterKeyEnum_names + 6777, 40}, 120304 },
  { {CodePathCounterKeyEnum_names + 6817, 39}, 120303 },
  { {CodePathCounterKeyEnum_names + 6856, 29}, 101001 },
  { {CodePathCounterKeyEnum_names + 6885, 29}, 101000 },
  { {CodePathCounterKeyEnum_names + 6914, 18}, 101006 },
  { {CodePathCounterKeyEnum_names + 6932, 22}, 101005 },
  { {CodePathCounterKeyEnum_names + 6954, 34}, 101007 },
  { {CodePathCounterKeyEnum_names + 6988, 24}, 101008 },
  { {CodePathCounterKeyEnum_names + 7012, 23}, 101003 },
  { {CodePathCounterKeyEnum_names + 7035, 28}, 101002 },
  { {CodePathCounterKeyEnum_names + 7063, 24}, 101004 },
  { {CodePathCounterKeyEnum_names + 7087, 16}, 121001 },
  { {CodePathCounterKeyEnum_names + 7103, 15}, 121000 },
  { {CodePathCounterKeyEnum_names + 7118, 24}, 100106 },
  { {CodePathCounterKeyEnum_names + 7142, 27}, 100107 },
  { {CodePathCounterKeyEnum_names + 7169, 13}, 100108 },
  { {CodePathCounterKeyEnum_names + 7182, 11}, 100101 },
  { {CodePathCounterKeyEnum_names + 7193, 22}, 100112 },
  { {CodePathCounterKeyEnum_names + 7215, 34}, 100110 },
  { {CodePathCounterKeyEnum_names + 7249, 34}, 100109 },
  { {CodePathCounterKeyEnum_names + 7283, 20}, 100111 },
  { {CodePathCounterKeyEnum_names + 7303, 28}, 100103 },
  { {CodePathCounterKeyEnum_names + 7331, 24}, 100102 },
  { {CodePathCounterKeyEnum_names + 7355, 13}, 100104 },
  { {CodePathCounterKeyEnum_names + 7368, 11}, 100100 },
  { {CodePathCounterKeyEnum_names + 7379, 20}, 100105 },
};

static const int CodePathCounterKeyEnum_entries_by_number[] = {
  81, // 0 -> KEY_UNKNOWN
  93, // 100000 -> L2CAP_SUCCESS
  84, // 100001 -> L2CAP_CONNECT_CONFIRM_NEG
  89, // 100002 -> L2CAP_NO_COMPATIBLE_CHANNEL_AT_CSM_CLOSED
  91, // 100003 -> L2CAP_SECURITY_NEG_AT_CSM_CLOSED
  95, // 100004 -> L2CAP_TIMEOUT_AT_CSM_CLOSED
  87, // 100005 -> L2CAP_CREDIT_BASED_CONNECT_RSP_NEG
  85, // 100006 -> L2CAP_CONNECT_RSP_NEG
  88, // 100007 -> L2CAP_INFO_NO_COMPATIBLE_CHANNEL_AT_RSP
  82, // 100008 -> L2CAP_CONFIG_REQ_FAILURE
  83, // 100009 -> L2CAP_CONFIG_RSP_NEG
  90, // 100010 -> L2CAP_NO_COMPATIBLE_CHANNEL_AT_W4_SEC
  92, // 100011 -> L2CAP_SECURITY_NEG_AT_W4_SEC
  94, // 100012 -> L2CAP_TIMEOUT_AT_CONNECT_RSP
  86, // 100013 -> L2CAP_CONN_OTHER_ERROR_AT_CONNECT_RSP
  216, // 100100 -> SDP_SUCCESS
  208, // 100101 -> SDP_FAILURE
  214, // 100102 -> SDP_SENDING_DELAYED_UUID
  213, // 100103 -> SDP_NOT_SENDING_DELAYED_UUID
  215, // 100104 -> SDP_SENT_UUID
  217, // 100105 -> SDP_UUIDS_EQUAL_SKIP
  205, // 100106 -> SDP_ADD_UUID_WITH_INTENT
  206, // 100107 -> SDP_ADD_UUID_WITH_NO_INTENT
  207, // 100108 -> SDP_DROP_UUID
  211, // 100109 -> SDP_FETCH_UUID_SKIP_ALREADY_CACHED
  210, // 100110 -> SDP_FETCH_UUID_SKIP_ALREADY_BONDED
  212, // 100111 -> SDP_INVOKE_SDP_CYCLE
  209, // 100112 -> SDP_FETCH_UUID_REQUEST
  195, // 101000 -> RFCOMM_CONNECTION_SUCCESS_IND
  194, // 101001 -> RFCOMM_CONNECTION_SUCCESS_CNF
  201, // 101002 -> RFCOMM_PORT_START_CNF_FAILED
  200, // 101003 -> RFCOMM_PORT_START_CLOSE
  202, // 101004 -> RFCOMM_PORT_START_FAILED
  197, // 101005 -> RFCOMM_PORT_NEG_FAILED
  196, // 101006 -> RFCOMM_PORT_CLOSED
  198, // 101007 -> RFCOMM_PORT_PEER_CONNECTION_FAILED
  199, // 101008 -> RFCOMM_PORT_PEER_TIMEOUT
  20, // 101101 -> HFP_COLLISON_AT_AG_OPEN
  21, // 101102 -> HFP_COLLISON_AT_CONNECTING
  22, // 101103 -> HFP_SELF_INITIATED_AG_FAILED
  23, // 101104 -> HFP_SLC_SETUP_FAILED
  6, // 102000 -> A2DP_CONNECTION_SUCCESS
  1, // 102001 -> A2DP_CONNECTION_ACL_DISCONNECTED
  5, // 102002 -> A2DP_CONNECTION_REJECT_EVT
  4, // 102003 -> A2DP_CONNECTION_FAILURE
  8, // 102004 -> A2DP_CONNECTION_UNKNOWN_EVENT
  0, // 102005 -> A2DP_ALREADY_CONNECTING
  9, // 102006 -> A2DP_OFFLOAD_START_REQ_FAILURE
  2, // 102007 -> A2DP_CONNECTION_CLOSE
  3, // 102008 -> A2DP_CONNECTION_DISCONNECTED
  7, // 102009 -> A2DP_CONNECTION_TIMEOUT
  80, // 103001 -> HID_PLUG_FAILURE
  50, // 103002 -> HIDD_REGISTER_DESCRIPTOR_MALFORMED
  43, // 103003 -> HIDD_ERR_NOT_REGISTERED_AT_INITIATE
  49, // 103004 -> HIDD_ERR_NO_RESOURCES
  48, // 103005 -> HIDD_ERR_NO_CONNECTION_AT_SEND_DATA
  47, // 103006 -> HIDD_ERR_NO_CONNECTION_AT_DISCONNECT
  33, // 103007 -> HIDD_ERR_INVALID_PARAM
  26, // 103008 -> HIDD_ERR_CONGESTED_AT_DATA_WRITE
  27, // 103009 -> HIDD_ERR_CONGESTED_AT_FLAG_CHECK
  28, // 103010 -> HIDD_ERR_CONN_IN_PROCESS
  24, // 103011 -> HIDD_ERR_ALREADY_CONN
  31, // 103012 -> HIDD_ERR_DISCONNECTING
  38, // 103013 -> HIDD_ERR_L2CAP_NOT_STARTED_INCOMING
  36, // 103014 -> HIDD_ERR_L2CAP_FAILED_INITIATE
  35, // 103015 -> HIDD_ERR_L2CAP_FAILED_CONTROL
  37, // 103016 -> HIDD_ERR_L2CAP_FAILED_INTERRUPT
  32, // 103017 -> HIDD_ERR_HOST_CALLBACK_NULL
  34, // 103018 -> HIDD_ERR_INVALID_PARAM_SEND_REPORT
  29, // 103019 -> HIDD_ERR_DEVICE_NOT_IN_USE_AT_CONNECT
  30, // 103020 -> HIDD_ERR_DEVICE_NOT_IN_USE_AT_DISCONNECT
  39, // 103021 -> HIDD_ERR_NOT_REGISTERED_AT_CONNECT
  41, // 103022 -> HIDD_ERR_NOT_REGISTERED_AT_DISCONNECT
  42, // 103023 -> HIDD_ERR_NOT_REGISTERED_AT_GET_DEVICE
  40, // 103024 -> HIDD_ERR_NOT_REGISTERED_AT_DEREGISTER
  46, // 103025 -> HIDD_ERR_NOT_REGISTERED_DUE_TO_DESCRIPTOR_LENGTH
  45, // 103026 -> HIDD_ERR_NOT_REGISTERED_DUE_TO_BUFFER_ALLOCATION
  44, // 103027 -> HIDD_ERR_NOT_REGISTERED_AT_SDP
  25, // 103028 -> HIDD_ERR_ALREADY_REGISTERED
  60, // 103101 -> HIDH_ERR_ALREADY_REGISTERED
  78, // 103102 -> HIDH_ERR_NO_RESOURCES_SDP
  77, // 103103 -> HIDH_ERR_NO_RESOURCES_ADD_DEVICE
  76, // 103104 -> HIDH_ERR_NO_CONNECTION_AT_SEND_DATA
  75, // 103105 -> HIDH_ERR_NO_CONNECTION_AT_HOST_WRITE_DEV
  74, // 103106 -> HIDH_ERR_NO_CONNECTION_AT_HOST_CLOSE_DEV
  70, // 103107 -> HIDH_ERR_INVALID_PARAM_AT_SEND_DATA
  67, // 103108 -> HIDH_ERR_INVALID_PARAM_AT_HOST_REGISTER
  68, // 103109 -> HIDH_ERR_INVALID_PARAM_AT_HOST_REMOVE_DEV
  66, // 103110 -> HIDH_ERR_INVALID_PARAM_AT_HOST_OPEN_DEV
  65, // 103111 -> HIDH_ERR_INVALID_PARAM_AT_HOST_CLOSE_DEV
  69, // 103112 -> HIDH_ERR_INVALID_PARAM_AT_HOST_WRITE_DEV
  63, // 103113 -> HIDH_ERR_CONGESTED_AT_SEND_DATA
  62, // 103114 -> HIDH_ERR_CONGESTED_AT_FLAG_CHECK
  64, // 103115 -> HIDH_ERR_CONN_IN_PROCESS
  59, // 103116 -> HIDH_ERR_ALREADY_CONN
  71, // 103117 -> HIDH_ERR_L2CAP_FAILED_AT_INITIATE
  72, // 103118 -> HIDH_ERR_L2CAP_FAILED_AT_REGISTER_CONTROL
  73, // 103119 -> HIDH_ERR_L2CAP_FAILED_AT_REGISTER_INTERRUPT
  61, // 103120 -> HIDH_ERR_AUTH_FAILED
  79, // 103121 -> HIDH_ERR_SDP_BUSY
  54, // 103122 -> HIDH_COUNT_MAX_ADDED_DEVICE_LIMIT_REACHED
  57, // 103123 -> HIDH_COUNT_VIRTUAL_UNPLUG_REQUESTED_BY_REMOTE_DEVICE
  52, // 103124 -> HIDH_COUNT_CONNECT_REQ_WHEN_MAX_DEVICE_LIMIT_REACHED
  58, // 103125 -> HIDH_COUNT_WRONG_REPORT_TYPE
  53, // 103126 -> HIDH_COUNT_INCOMING_CONNECTION_REJECTED
  51, // 103127 -> HIDH_COUNT_CONNECTION_POLICY_DISABLED
  55, // 103128 -> HIDH_COUNT_SUPPORT_BOTH_HID_AND_HOGP
  56, // 103129 -> HIDH_COUNT_SUPPORT_ONLY_HID_OR_HOGP
  150, // 120000 -> LE_SCAN_COUNT_TOTAL_ENABLE
  149, // 120001 -> LE_SCAN_COUNT_TOTAL_DISABLE
  148, // 120002 -> LE_SCAN_COUNT_FILTERED_ENABLE
  147, // 120003 -> LE_SCAN_COUNT_FILTERED_DISABLE
  152, // 120004 -> LE_SCAN_COUNT_UNFILTERED_ENABLE
  151, // 120005 -> LE_SCAN_COUNT_UNFILTERED_DISABLE
  146, // 120006 -> LE_SCAN_COUNT_BATCH_ENABLE
  145, // 120007 -> LE_SCAN_COUNT_BATCH_DISABLE
  144, // 120008 -> LE_SCAN_COUNT_AUTO_BATCH_ENABLE
  143, // 120009 -> LE_SCAN_COUNT_AUTO_BATCH_DISABLE
  159, // 120100 -> LE_SCAN_DURATION_COUNT_REGULAR_10S
  162, // 120101 -> LE_SCAN_DURATION_COUNT_REGULAR_1M
  158, // 120102 -> LE_SCAN_DURATION_COUNT_REGULAR_10M
  160, // 120103 -> LE_SCAN_DURATION_COUNT_REGULAR_1H
  161, // 120104 -> LE_SCAN_DURATION_COUNT_REGULAR_1HP
  154, // 120105 -> LE_SCAN_DURATION_COUNT_BATCH_10S
  157, // 120106 -> LE_SCAN_DURATION_COUNT_BATCH_1M
  153, // 120107 -> LE_SCAN_DURATION_COUNT_BATCH_10M
  155, // 120108 -> LE_SCAN_DURATION_COUNT_BATCH_1H
  156, // 120109 -> LE_SCAN_DURATION_COUNT_BATCH_1HP
  163, // 120200 -> LE_SCAN_RADIO_DURATION_ALL
  167, // 120201 -> LE_SCAN_RADIO_DURATION_REGULAR
  164, // 120202 -> LE_SCAN_RADIO_DURATION_BATCH
  169, // 120203 -> LE_SCAN_RADIO_DURATION_REGULAR_SCREEN_ON
  168, // 120204 -> LE_SCAN_RADIO_DURATION_REGULAR_SCREEN_OFF
  166, // 120205 -> LE_SCAN_RADIO_DURATION_BATCH_SCREEN_ON
  165, // 120206 -> LE_SCAN_RADIO_DURATION_BATCH_SCREEN_OFF
  178, // 120250 -> LE_SCAN_RADIO_SCAN_MODE_OPPORTUNISTIC_COUNT
  176, // 120251 -> LE_SCAN_RADIO_SCAN_MODE_LOW_POWER_COUNT
  172, // 120252 -> LE_SCAN_RADIO_SCAN_MODE_BALANCED_COUNT
  174, // 120253 -> LE_SCAN_RADIO_SCAN_MODE_LOW_LATENCY_COUNT
  170, // 120254 -> LE_SCAN_RADIO_SCAN_MODE_AMBIENT_DISCOVERY_COUNT
  182, // 120255 -> LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_COUNT
  180, // 120256 -> LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_BALANCED_COUNT
  179, // 120257 -> LE_SCAN_RADIO_SCAN_MODE_OPPORTUNISTIC_COUNT_SCREEN_OFF
  177, // 120258 -> LE_SCAN_RADIO_SCAN_MODE_LOW_POWER_COUNT_SCREEN_OFF
  173, // 120259 -> LE_SCAN_RADIO_SCAN_MODE_BALANCED_COUNT_SCREEN_OFF
  175, // 120260 -> LE_SCAN_RADIO_SCAN_MODE_LOW_LATENCY_COUNT_SCREEN_OFF
  171, // 120261 -> LE_SCAN_RADIO_SCAN_MODE_AMBIENT_DISCOVERY_COUNT_SCREEN_OFF
  183, // 120262 -> LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_COUNT_SCREEN_OFF
  181, // 120263 -> LE_SCAN_RADIO_SCAN_MODE_SCREEN_OFF_BALANCED_COUNT_SCREEN_OFF
  184, // 120300 -> LE_SCAN_RESULTS_COUNT_ALL
  191, // 120301 -> LE_SCAN_RESULTS_COUNT_REGULAR
  185, // 120302 -> LE_SCAN_RESULTS_COUNT_BATCH
  193, // 120303 -> LE_SCAN_RESULTS_COUNT_REGULAR_SCREEN_ON
  192, // 120304 -> LE_SCAN_RESULTS_COUNT_REGULAR_SCREEN_OFF
  190, // 120305 -> LE_SCAN_RESULTS_COUNT_BATCH_SCREEN_ON
  189, // 120306 -> LE_SCAN_RESULTS_COUNT_BATCH_SCREEN_OFF
  186, // 120307 -> LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE
  188, // 120308 -> LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE_SCREEN_ON
  187, // 120309 -> LE_SCAN_RESULTS_COUNT_BATCH_BUNDLE_SCREEN_OFF
  141, // 120400 -> LE_SCAN_ABUSE_COUNT_SCAN_TIMEOUT
  140, // 120401 -> LE_SCAN_ABUSE_COUNT_HW_FILTER_NOT_AVAILABLE
  142, // 120402 -> LE_SCAN_ABUSE_COUNT_TRACKING_HW_FILTER_NOT_AVAILABLE
  99, // 120500 -> LE_ADV_COUNT_ENABLE
  98, // 120501 -> LE_ADV_COUNT_DISABLE
  97, // 120502 -> LE_ADV_COUNT_CONNECTABLE_ENABLE
  96, // 120503 -> LE_ADV_COUNT_CONNECTABLE_DISABLE
  101, // 120504 -> LE_ADV_COUNT_PERIODIC_ENABLE
  100, // 120505 -> LE_ADV_COUNT_PERIODIC_DISABLE
  121, // 120600 -> LE_ADV_INSTANCE_COUNT_5
  118, // 120601 -> LE_ADV_INSTANCE_COUNT_10
  119, // 120602 -> LE_ADV_INSTANCE_COUNT_15
  120, // 120603 -> LE_ADV_INSTANCE_COUNT_15P
  113, // 120700 -> LE_ADV_DURATION_COUNT_TOTAL_1M
  114, // 120701 -> LE_ADV_DURATION_COUNT_TOTAL_30M
  112, // 120702 -> LE_ADV_DURATION_COUNT_TOTAL_1H
  115, // 120703 -> LE_ADV_DURATION_COUNT_TOTAL_3H
  116, // 120704 -> LE_ADV_DURATION_COUNT_TOTAL_3HP
  103, // 120705 -> LE_ADV_DURATION_COUNT_CONNECTABLE_1M
  104, // 120706 -> LE_ADV_DURATION_COUNT_CONNECTABLE_30M
  102, // 120707 -> LE_ADV_DURATION_COUNT_CONNECTABLE_1H
  105, // 120708 -> LE_ADV_DURATION_COUNT_CONNECTABLE_3H
  106, // 120709 -> LE_ADV_DURATION_COUNT_CONNECTABLE_3HP
  108, // 120710 -> LE_ADV_DURATION_COUNT_PERIODIC_1M
  109, // 120711 -> LE_ADV_DURATION_COUNT_PERIODIC_30M
  107, // 120712 -> LE_ADV_DURATION_COUNT_PERIODIC_1H
  110, // 120713 -> LE_ADV_DURATION_COUNT_PERIODIC_3H
  111, // 120714 -> LE_ADV_DURATION_COUNT_PERIODIC_3HP
  117, // 120800 -> LE_ADV_ERROR_ON_START_COUNT
  13, // 120900 -> GATT_CLIENT_CONNECT_IS_DIRECT
  10, // 120901 -> GATT_CLIENT_CONNECT_IS_AUTOCONNECT
  14, // 120902 -> GATT_CLIENT_CONNECT_IS_DIRECT_IN_FOREGROUND
  15, // 120903 -> GATT_CLIENT_CONNECT_IS_DIRECT_NOT_IN_FOREGROUND
  11, // 120904 -> GATT_CLIENT_CONNECT_IS_AUTOCONNECT_IN_FOREGROUND
  12, // 120905 -> GATT_CLIENT_CONNECT_IS_AUTOCONNECT_NOT_IN_FOREGROUND
  18, // 120906 -> GATT_SERVER_CONNECT_IS_DIRECT_IN_FOREGROUND
  19, // 120907 -> GATT_SERVER_CONNECT_IS_DIRECT_NOT_IN_FOREGROUND
  16, // 120908 -> GATT_SERVER_CONNECT_IS_AUTOCONNECT_IN_FOREGROUND
  17, // 120909 -> GATT_SERVER_CONNECT_IS_AUTOCONNECT_NOT_IN_FOREGROUND
  204, // 121000 -> SCREEN_ON_EVENT
  203, // 121001 -> SCREEN_OFF_EVENT
  125, // 121100 -> LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_GOOD
  122, // 121101 -> LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD
  124, // 121102 -> LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_DB
  123, // 121103 -> LE_AUDIO_ALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_CSIS
  134, // 121104 -> LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_GOOD
  131, // 121105 -> LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD
  133, // 121106 -> LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_DB
  132, // 121107 -> LE_AUDIO_NONALLOWLIST_DEVICE_HEALTH_STATUS_BAD_INVALID_CSIS
  129, // 121108 -> LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_GOOD
  130, // 121109 -> LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_TRENDING_BAD
  126, // 121110 -> LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD
  127, // 121111 -> LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_CIS_FAILED
  128, // 121112 -> LE_AUDIO_ALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_SIGNALING_FAILED
  138, // 121113 -> LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_GOOD
  139, // 121114 -> LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_TRENDING_BAD
  135, // 121115 -> LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD
  136, // 121116 -> LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_CIS_FAILED
  137, // 121117 -> LE_AUDIO_NONALLOWLIST_GROUP_HEALTH_STATUS_BAD_ONCE_SIGNALING_FAILED
};

const std::string& CodePathCounterKeyEnum_Name(
    CodePathCounterKeyEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CodePathCounterKeyEnum_entries,
          CodePathCounterKeyEnum_entries_by_number,
          218, CodePathCounterKeyEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CodePathCounterKeyEnum_entries,
      CodePathCounterKeyEnum_entries_by_number,
      218, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CodePathCounterKeyEnum_strings[idx].get();
}
bool CodePathCounterKeyEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CodePathCounterKeyEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CodePathCounterKeyEnum_entries, 218, name, &int_value);
  if (success) {
    *value = static_cast<CodePathCounterKeyEnum>(int_value);
  }
  return success;
}
bool AddressTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 65535:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AddressTypeEnum_strings[3] = {};

static const char AddressTypeEnum_names[] =
  "ADDRESS_TYPE_PUBLIC"
  "ADDRESS_TYPE_RANDOM"
  "ADDRESS_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AddressTypeEnum_entries[] = {
  { {AddressTypeEnum_names + 0, 19}, 0 },
  { {AddressTypeEnum_names + 19, 19}, 1 },
  { {AddressTypeEnum_names + 38, 20}, 65535 },
};

static const int AddressTypeEnum_entries_by_number[] = {
  0, // 0 -> ADDRESS_TYPE_PUBLIC
  1, // 1 -> ADDRESS_TYPE_RANDOM
  2, // 65535 -> ADDRESS_TYPE_UNKNOWN
};

const std::string& AddressTypeEnum_Name(
    AddressTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AddressTypeEnum_entries,
          AddressTypeEnum_entries_by_number,
          3, AddressTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AddressTypeEnum_entries,
      AddressTypeEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AddressTypeEnum_strings[idx].get();
}
bool AddressTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AddressTypeEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AddressTypeEnum>(int_value);
  }
  return success;
}
bool MajorClassEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 256:
    case 512:
    case 768:
    case 1024:
    case 1280:
    case 1536:
    case 1792:
    case 2048:
    case 2304:
    case 7936:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MajorClassEnum_strings[11] = {};

static const char MajorClassEnum_names[] =
  "MAJOR_CLASS_AUDIO_VIDEO"
  "MAJOR_CLASS_COMPUTER"
  "MAJOR_CLASS_HEALTH"
  "MAJOR_CLASS_IMAGING"
  "MAJOR_CLASS_MISC"
  "MAJOR_CLASS_NETWORKING"
  "MAJOR_CLASS_PERIPHERAL"
  "MAJOR_CLASS_PHONE"
  "MAJOR_CLASS_TOY"
  "MAJOR_CLASS_UNCATEGORIZED"
  "MAJOR_CLASS_WEARABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MajorClassEnum_entries[] = {
  { {MajorClassEnum_names + 0, 23}, 1024 },
  { {MajorClassEnum_names + 23, 20}, 256 },
  { {MajorClassEnum_names + 43, 18}, 2304 },
  { {MajorClassEnum_names + 61, 19}, 1536 },
  { {MajorClassEnum_names + 80, 16}, 0 },
  { {MajorClassEnum_names + 96, 22}, 768 },
  { {MajorClassEnum_names + 118, 22}, 1280 },
  { {MajorClassEnum_names + 140, 17}, 512 },
  { {MajorClassEnum_names + 157, 15}, 2048 },
  { {MajorClassEnum_names + 172, 25}, 7936 },
  { {MajorClassEnum_names + 197, 20}, 1792 },
};

static const int MajorClassEnum_entries_by_number[] = {
  4, // 0 -> MAJOR_CLASS_MISC
  1, // 256 -> MAJOR_CLASS_COMPUTER
  7, // 512 -> MAJOR_CLASS_PHONE
  5, // 768 -> MAJOR_CLASS_NETWORKING
  0, // 1024 -> MAJOR_CLASS_AUDIO_VIDEO
  6, // 1280 -> MAJOR_CLASS_PERIPHERAL
  3, // 1536 -> MAJOR_CLASS_IMAGING
  10, // 1792 -> MAJOR_CLASS_WEARABLE
  8, // 2048 -> MAJOR_CLASS_TOY
  2, // 2304 -> MAJOR_CLASS_HEALTH
  9, // 7936 -> MAJOR_CLASS_UNCATEGORIZED
};

const std::string& MajorClassEnum_Name(
    MajorClassEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MajorClassEnum_entries,
          MajorClassEnum_entries_by_number,
          11, MajorClassEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MajorClassEnum_entries,
      MajorClassEnum_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MajorClassEnum_strings[idx].get();
}
bool MajorClassEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MajorClassEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MajorClassEnum_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<MajorClassEnum>(int_value);
  }
  return success;
}
bool ProfileConnectionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProfileConnectionResult_strings[3] = {};

static const char ProfileConnectionResult_names[] =
  "RESULT_FAILURE"
  "RESULT_SUCCESS"
  "RESULT_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProfileConnectionResult_entries[] = {
  { {ProfileConnectionResult_names + 0, 14}, 2 },
  { {ProfileConnectionResult_names + 14, 14}, 1 },
  { {ProfileConnectionResult_names + 28, 14}, 0 },
};

static const int ProfileConnectionResult_entries_by_number[] = {
  2, // 0 -> RESULT_UNKNOWN
  1, // 1 -> RESULT_SUCCESS
  0, // 2 -> RESULT_FAILURE
};

const std::string& ProfileConnectionResult_Name(
    ProfileConnectionResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProfileConnectionResult_entries,
          ProfileConnectionResult_entries_by_number,
          3, ProfileConnectionResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProfileConnectionResult_entries,
      ProfileConnectionResult_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProfileConnectionResult_strings[idx].get();
}
bool ProfileConnectionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfileConnectionResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProfileConnectionResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ProfileConnectionResult>(int_value);
  }
  return success;
}
bool ProfileConnectionReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProfileConnectionReason_strings[5] = {};

static const char ProfileConnectionReason_names[] =
  "REASON_INCOMING_CONN_REJECTED"
  "REASON_NATIVE_LAYER_REJECTED"
  "REASON_SUCCESS"
  "REASON_UNEXPECTED_STATE"
  "REASON_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProfileConnectionReason_entries[] = {
  { {ProfileConnectionReason_names + 0, 29}, 4 },
  { {ProfileConnectionReason_names + 29, 28}, 3 },
  { {ProfileConnectionReason_names + 57, 14}, 1 },
  { {ProfileConnectionReason_names + 71, 23}, 2 },
  { {ProfileConnectionReason_names + 94, 14}, 0 },
};

static const int ProfileConnectionReason_entries_by_number[] = {
  4, // 0 -> REASON_UNKNOWN
  2, // 1 -> REASON_SUCCESS
  3, // 2 -> REASON_UNEXPECTED_STATE
  1, // 3 -> REASON_NATIVE_LAYER_REJECTED
  0, // 4 -> REASON_INCOMING_CONN_REJECTED
};

const std::string& ProfileConnectionReason_Name(
    ProfileConnectionReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProfileConnectionReason_entries,
          ProfileConnectionReason_entries_by_number,
          5, ProfileConnectionReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProfileConnectionReason_entries,
      ProfileConnectionReason_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProfileConnectionReason_strings[idx].get();
}
bool ProfileConnectionReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfileConnectionReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProfileConnectionReason_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ProfileConnectionReason>(int_value);
  }
  return success;
}
bool ContentProfileFileName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 20001:
    case 20002:
    case 20003:
    case 20004:
    case 20005:
    case 20006:
    case 20007:
    case 20008:
    case 20009:
    case 20010:
    case 20011:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentProfileFileName_strings[48] = {};

static const char ContentProfileFileName_names[] =
  "BLUETOOTH_FILE_NAME_UNKNOWN"
  "BLUETOOTH_MAP_ACCOUNT_LOADER"
  "BLUETOOTH_MAP_APP_OBSERVER"
  "BLUETOOTH_MAP_APP_PARAMS"
  "BLUETOOTH_MAP_BMESSAGE"
  "BLUETOOTH_MAP_BMESSAGE_EMAIL"
  "BLUETOOTH_MAP_BMESSAGE_MIME"
  "BLUETOOTH_MAP_CONTENT"
  "BLUETOOTH_MAP_CONTENT_OBSERVER"
  "BLUETOOTH_MAP_CONVO_CONTACT_ELEMENT"
  "BLUETOOTH_MAP_CONVO_LISTING"
  "BLUETOOTH_MAP_CONVO_LISTING_ELEMENT"
  "BLUETOOTH_MAP_FOLDER_ELEMENT"
  "BLUETOOTH_MAP_MAS_INSTANCE"
  "BLUETOOTH_MAP_MESSAGE_LISTING"
  "BLUETOOTH_MAP_OBEX_SERVER"
  "BLUETOOTH_MAP_SERVICE"
  "BLUETOOTH_MAP_SMS_PDU"
  "BLUETOOTH_MAP_UTILS"
  "BLUETOOTH_MMS_FILE_PROVIDER"
  "BLUETOOTH_MNS_OBEX_CLIENT"
  "BLUETOOTH_OPP_CONSTANTS"
  "BLUETOOTH_OPP_INCOMING_FILE_CONFIRM_ACTIVITY"
  "BLUETOOTH_OPP_LAUNCHER_ACTIVITY"
  "BLUETOOTH_OPP_MANAGER"
  "BLUETOOTH_OPP_OBEX_CLIENT_SESSION"
  "BLUETOOTH_OPP_OBEX_SERVER_SESSION"
  "BLUETOOTH_OPP_PROVIDER"
  "BLUETOOTH_OPP_RECEIVER"
  "BLUETOOTH_OPP_RECEIVE_FILE_INFO"
  "BLUETOOTH_OPP_SEND_FILE_INFO"
  "BLUETOOTH_OPP_SERVICE"
  "BLUETOOTH_OPP_TRANSFER"
  "BLUETOOTH_OPP_TRANSFER_ACTIVITY"
  "BLUETOOTH_OPP_TRANSFER_HISTORY"
  "BLUETOOTH_OPP_UTILITY"
  "BLUETOOTH_PBAP_ACTIVITY"
  "BLUETOOTH_PBAP_AUTHENTICATOR"
  "BLUETOOTH_PBAP_CALL_LOG_COMPOSER"
  "BLUETOOTH_PBAP_CONFIG"
  "BLUETOOTH_PBAP_HANDLER_FOR_STRING_BUFFER"
  "BLUETOOTH_PBAP_OBEX_SERVER"
  "BLUETOOTH_PBAP_SERVICE"
  "BLUETOOTH_PBAP_SIM_VCARD_MANAGER"
  "BLUETOOTH_PBAP_STATE_MACHINE"
  "BLUETOOTH_PBAP_UTILS"
  "BLUETOOTH_PBAP_VCARD_MANAGER"
  "BLUETOOTH_SMS_MMS_CONTACTS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentProfileFileName_entries[] = {
  { {ContentProfileFileName_names + 0, 27}, 0 },
  { {ContentProfileFileName_names + 27, 28}, 1 },
  { {ContentProfileFileName_names + 55, 26}, 2 },
  { {ContentProfileFileName_names + 81, 24}, 3 },
  { {ContentProfileFileName_names + 105, 22}, 4 },
  { {ContentProfileFileName_names + 127, 28}, 5 },
  { {ContentProfileFileName_names + 155, 27}, 6 },
  { {ContentProfileFileName_names + 182, 21}, 7 },
  { {ContentProfileFileName_names + 203, 30}, 8 },
  { {ContentProfileFileName_names + 233, 35}, 9 },
  { {ContentProfileFileName_names + 268, 27}, 10 },
  { {ContentProfileFileName_names + 295, 35}, 11 },
  { {ContentProfileFileName_names + 330, 28}, 12 },
  { {ContentProfileFileName_names + 358, 26}, 13 },
  { {ContentProfileFileName_names + 384, 29}, 14 },
  { {ContentProfileFileName_names + 413, 25}, 15 },
  { {ContentProfileFileName_names + 438, 21}, 16 },
  { {ContentProfileFileName_names + 459, 21}, 17 },
  { {ContentProfileFileName_names + 480, 19}, 18 },
  { {ContentProfileFileName_names + 499, 27}, 21 },
  { {ContentProfileFileName_names + 526, 25}, 19 },
  { {ContentProfileFileName_names + 551, 23}, 10015 },
  { {ContentProfileFileName_names + 574, 44}, 10009 },
  { {ContentProfileFileName_names + 618, 31}, 10005 },
  { {ContentProfileFileName_names + 649, 21}, 10001 },
  { {ContentProfileFileName_names + 670, 33}, 10003 },
  { {ContentProfileFileName_names + 703, 33}, 10010 },
  { {ContentProfileFileName_names + 736, 22}, 10013 },
  { {ContentProfileFileName_names + 758, 22}, 10006 },
  { {ContentProfileFileName_names + 780, 31}, 10011 },
  { {ContentProfileFileName_names + 811, 28}, 10008 },
  { {ContentProfileFileName_names + 839, 21}, 10014 },
  { {ContentProfileFileName_names + 860, 22}, 10007 },
  { {ContentProfileFileName_names + 882, 31}, 10012 },
  { {ContentProfileFileName_names + 913, 30}, 10002 },
  { {ContentProfileFileName_names + 943, 21}, 10004 },
  { {ContentProfileFileName_names + 964, 23}, 20001 },
  { {ContentProfileFileName_names + 987, 28}, 20002 },
  { {ContentProfileFileName_names + 1015, 32}, 20003 },
  { {ContentProfileFileName_names + 1047, 21}, 20004 },
  { {ContentProfileFileName_names + 1068, 40}, 20010 },
  { {ContentProfileFileName_names + 1108, 26}, 20005 },
  { {ContentProfileFileName_names + 1134, 22}, 20006 },
  { {ContentProfileFileName_names + 1156, 32}, 20007 },
  { {ContentProfileFileName_names + 1188, 28}, 20011 },
  { {ContentProfileFileName_names + 1216, 20}, 20008 },
  { {ContentProfileFileName_names + 1236, 28}, 20009 },
  { {ContentProfileFileName_names + 1264, 26}, 20 },
};

static const int ContentProfileFileName_entries_by_number[] = {
  0, // 0 -> BLUETOOTH_FILE_NAME_UNKNOWN
  1, // 1 -> BLUETOOTH_MAP_ACCOUNT_LOADER
  2, // 2 -> BLUETOOTH_MAP_APP_OBSERVER
  3, // 3 -> BLUETOOTH_MAP_APP_PARAMS
  4, // 4 -> BLUETOOTH_MAP_BMESSAGE
  5, // 5 -> BLUETOOTH_MAP_BMESSAGE_EMAIL
  6, // 6 -> BLUETOOTH_MAP_BMESSAGE_MIME
  7, // 7 -> BLUETOOTH_MAP_CONTENT
  8, // 8 -> BLUETOOTH_MAP_CONTENT_OBSERVER
  9, // 9 -> BLUETOOTH_MAP_CONVO_CONTACT_ELEMENT
  10, // 10 -> BLUETOOTH_MAP_CONVO_LISTING
  11, // 11 -> BLUETOOTH_MAP_CONVO_LISTING_ELEMENT
  12, // 12 -> BLUETOOTH_MAP_FOLDER_ELEMENT
  13, // 13 -> BLUETOOTH_MAP_MAS_INSTANCE
  14, // 14 -> BLUETOOTH_MAP_MESSAGE_LISTING
  15, // 15 -> BLUETOOTH_MAP_OBEX_SERVER
  16, // 16 -> BLUETOOTH_MAP_SERVICE
  17, // 17 -> BLUETOOTH_MAP_SMS_PDU
  18, // 18 -> BLUETOOTH_MAP_UTILS
  20, // 19 -> BLUETOOTH_MNS_OBEX_CLIENT
  47, // 20 -> BLUETOOTH_SMS_MMS_CONTACTS
  19, // 21 -> BLUETOOTH_MMS_FILE_PROVIDER
  24, // 10001 -> BLUETOOTH_OPP_MANAGER
  34, // 10002 -> BLUETOOTH_OPP_TRANSFER_HISTORY
  25, // 10003 -> BLUETOOTH_OPP_OBEX_CLIENT_SESSION
  35, // 10004 -> BLUETOOTH_OPP_UTILITY
  23, // 10005 -> BLUETOOTH_OPP_LAUNCHER_ACTIVITY
  28, // 10006 -> BLUETOOTH_OPP_RECEIVER
  32, // 10007 -> BLUETOOTH_OPP_TRANSFER
  30, // 10008 -> BLUETOOTH_OPP_SEND_FILE_INFO
  22, // 10009 -> BLUETOOTH_OPP_INCOMING_FILE_CONFIRM_ACTIVITY
  26, // 10010 -> BLUETOOTH_OPP_OBEX_SERVER_SESSION
  29, // 10011 -> BLUETOOTH_OPP_RECEIVE_FILE_INFO
  33, // 10012 -> BLUETOOTH_OPP_TRANSFER_ACTIVITY
  27, // 10013 -> BLUETOOTH_OPP_PROVIDER
  31, // 10014 -> BLUETOOTH_OPP_SERVICE
  21, // 10015 -> BLUETOOTH_OPP_CONSTANTS
  36, // 20001 -> BLUETOOTH_PBAP_ACTIVITY
  37, // 20002 -> BLUETOOTH_PBAP_AUTHENTICATOR
  38, // 20003 -> BLUETOOTH_PBAP_CALL_LOG_COMPOSER
  39, // 20004 -> BLUETOOTH_PBAP_CONFIG
  41, // 20005 -> BLUETOOTH_PBAP_OBEX_SERVER
  42, // 20006 -> BLUETOOTH_PBAP_SERVICE
  43, // 20007 -> BLUETOOTH_PBAP_SIM_VCARD_MANAGER
  45, // 20008 -> BLUETOOTH_PBAP_UTILS
  46, // 20009 -> BLUETOOTH_PBAP_VCARD_MANAGER
  40, // 20010 -> BLUETOOTH_PBAP_HANDLER_FOR_STRING_BUFFER
  44, // 20011 -> BLUETOOTH_PBAP_STATE_MACHINE
};

const std::string& ContentProfileFileName_Name(
    ContentProfileFileName value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentProfileFileName_entries,
          ContentProfileFileName_entries_by_number,
          48, ContentProfileFileName_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentProfileFileName_entries,
      ContentProfileFileName_entries_by_number,
      48, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentProfileFileName_strings[idx].get();
}
bool ContentProfileFileName_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentProfileFileName* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentProfileFileName_entries, 48, name, &int_value);
  if (success) {
    *value = static_cast<ContentProfileFileName>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bluetooth
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
