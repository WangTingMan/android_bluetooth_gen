// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/smp/enums.proto

#include "frameworks/proto_logging/stats/enums/bluetooth/smp/enums.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace android {
namespace bluetooth {
namespace smp {
}  // namespace smp
}  // namespace bluetooth
}  // namespace android
namespace android {
namespace bluetooth {
namespace smp {
bool CommandEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 65280:
    case 65281:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommandEnum_strings[32] = {};

static const char CommandEnum_names[] =
  "CMD_BR_ENCRYPTION_INFON"
  "CMD_BR_IDENTITY_ADDR_INFO"
  "CMD_BR_IDENTITY_INFO"
  "CMD_BR_MASTER_IDENTIFICATION"
  "CMD_BR_PAIRING_COMPLETE"
  "CMD_BR_PAIRING_CONFIRM"
  "CMD_BR_PAIRING_DHKEY_CHECK"
  "CMD_BR_PAIRING_FAILED"
  "CMD_BR_PAIRING_KEYPRESS_INFO"
  "CMD_BR_PAIRING_PUBLIC_KEY"
  "CMD_BR_PAIRING_RANDOM"
  "CMD_BR_PAIRING_REQUEST"
  "CMD_BR_PAIRING_RESPONSE"
  "CMD_BR_SECURITY_REQUEST"
  "CMD_BR_SIGNING_INFO"
  "CMD_BR_UNKNOWN"
  "CMD_ENCRYPTION_INFON"
  "CMD_IDENTITY_ADDR_INFO"
  "CMD_IDENTITY_INFO"
  "CMD_MASTER_IDENTIFICATION"
  "CMD_PAIRING_COMPLETE"
  "CMD_PAIRING_CONFIRM"
  "CMD_PAIRING_DHKEY_CHECK"
  "CMD_PAIRING_FAILED"
  "CMD_PAIRING_KEYPRESS_INFO"
  "CMD_PAIRING_PUBLIC_KEY"
  "CMD_PAIRING_RANDOM"
  "CMD_PAIRING_REQUEST"
  "CMD_PAIRING_RESPONSE"
  "CMD_SECURITY_REQUEST"
  "CMD_SIGNING_INFO"
  "CMD_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommandEnum_entries[] = {
  { {CommandEnum_names + 0, 23}, 262 },
  { {CommandEnum_names + 23, 25}, 265 },
  { {CommandEnum_names + 48, 20}, 264 },
  { {CommandEnum_names + 68, 28}, 263 },
  { {CommandEnum_names + 96, 23}, 65281 },
  { {CommandEnum_names + 119, 22}, 259 },
  { {CommandEnum_names + 141, 26}, 269 },
  { {CommandEnum_names + 167, 21}, 261 },
  { {CommandEnum_names + 188, 28}, 270 },
  { {CommandEnum_names + 216, 25}, 268 },
  { {CommandEnum_names + 241, 21}, 260 },
  { {CommandEnum_names + 262, 22}, 257 },
  { {CommandEnum_names + 284, 23}, 258 },
  { {CommandEnum_names + 307, 23}, 267 },
  { {CommandEnum_names + 330, 19}, 266 },
  { {CommandEnum_names + 349, 14}, 256 },
  { {CommandEnum_names + 363, 20}, 6 },
  { {CommandEnum_names + 383, 22}, 9 },
  { {CommandEnum_names + 405, 17}, 8 },
  { {CommandEnum_names + 422, 25}, 7 },
  { {CommandEnum_names + 447, 20}, 65280 },
  { {CommandEnum_names + 467, 19}, 3 },
  { {CommandEnum_names + 486, 23}, 13 },
  { {CommandEnum_names + 509, 18}, 5 },
  { {CommandEnum_names + 527, 25}, 14 },
  { {CommandEnum_names + 552, 22}, 12 },
  { {CommandEnum_names + 574, 18}, 4 },
  { {CommandEnum_names + 592, 19}, 1 },
  { {CommandEnum_names + 611, 20}, 2 },
  { {CommandEnum_names + 631, 20}, 11 },
  { {CommandEnum_names + 651, 16}, 10 },
  { {CommandEnum_names + 667, 11}, 0 },
};

static const int CommandEnum_entries_by_number[] = {
  31, // 0 -> CMD_UNKNOWN
  27, // 1 -> CMD_PAIRING_REQUEST
  28, // 2 -> CMD_PAIRING_RESPONSE
  21, // 3 -> CMD_PAIRING_CONFIRM
  26, // 4 -> CMD_PAIRING_RANDOM
  23, // 5 -> CMD_PAIRING_FAILED
  16, // 6 -> CMD_ENCRYPTION_INFON
  19, // 7 -> CMD_MASTER_IDENTIFICATION
  18, // 8 -> CMD_IDENTITY_INFO
  17, // 9 -> CMD_IDENTITY_ADDR_INFO
  30, // 10 -> CMD_SIGNING_INFO
  29, // 11 -> CMD_SECURITY_REQUEST
  25, // 12 -> CMD_PAIRING_PUBLIC_KEY
  22, // 13 -> CMD_PAIRING_DHKEY_CHECK
  24, // 14 -> CMD_PAIRING_KEYPRESS_INFO
  15, // 256 -> CMD_BR_UNKNOWN
  11, // 257 -> CMD_BR_PAIRING_REQUEST
  12, // 258 -> CMD_BR_PAIRING_RESPONSE
  5, // 259 -> CMD_BR_PAIRING_CONFIRM
  10, // 260 -> CMD_BR_PAIRING_RANDOM
  7, // 261 -> CMD_BR_PAIRING_FAILED
  0, // 262 -> CMD_BR_ENCRYPTION_INFON
  3, // 263 -> CMD_BR_MASTER_IDENTIFICATION
  2, // 264 -> CMD_BR_IDENTITY_INFO
  1, // 265 -> CMD_BR_IDENTITY_ADDR_INFO
  14, // 266 -> CMD_BR_SIGNING_INFO
  13, // 267 -> CMD_BR_SECURITY_REQUEST
  9, // 268 -> CMD_BR_PAIRING_PUBLIC_KEY
  6, // 269 -> CMD_BR_PAIRING_DHKEY_CHECK
  8, // 270 -> CMD_BR_PAIRING_KEYPRESS_INFO
  20, // 65280 -> CMD_PAIRING_COMPLETE
  4, // 65281 -> CMD_BR_PAIRING_COMPLETE
};

const std::string& CommandEnum_Name(
    CommandEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommandEnum_entries,
          CommandEnum_entries_by_number,
          32, CommandEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommandEnum_entries,
      CommandEnum_entries_by_number,
      32, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommandEnum_strings[idx].get();
}
bool CommandEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommandEnum_entries, 32, name, &int_value);
  if (success) {
    *value = static_cast<CommandEnum>(int_value);
  }
  return success;
}
bool PairingFailReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 27:
    case 271:
    case 272:
    case 275:
    case 276:
    case 277:
    case 278:
    case 280:
    case 281:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PairingFailReasonEnum_strings[24] = {};

static const char PairingFailReasonEnum_names[] =
  "PAIRING_FAIL_REASON_AUTH_REQ"
  "PAIRING_FAIL_REASON_BUSY"
  "PAIRING_FAIL_REASON_CANCELLED"
  "PAIRING_FAIL_REASON_CLASSIC_PAIRING_IN_PROGR"
  "PAIRING_FAIL_REASON_CONFIRM_VALUE"
  "PAIRING_FAIL_REASON_CONNECTION_TIMEOUT"
  "PAIRING_FAIL_REASON_DHKEY_CHK"
  "PAIRING_FAIL_REASON_ENCRYPTION_FAIL"
  "PAIRING_FAIL_REASON_ENC_KEY_SIZE"
  "PAIRING_FAIL_REASON_FAIL"
  "PAIRING_FAIL_REASON_INTERNAL_ERROR"
  "PAIRING_FAIL_REASON_INVALID_CMD"
  "PAIRING_FAIL_REASON_INVALID_PARAMETERS"
  "PAIRING_FAIL_REASON_NUMERIC_COMPARISON"
  "PAIRING_FAIL_REASON_OOB"
  "PAIRING_FAIL_REASON_PAIR_NOT_SUPPORT"
  "PAIRING_FAIL_REASON_PASSKEY_ENTRY"
  "PAIRING_FAIL_REASON_REPEATED_ATTEMPTS"
  "PAIRING_FAIL_REASON_RESERVED"
  "PAIRING_FAIL_REASON_RESPONSE_TIMEOUT"
  "PAIRING_FAIL_REASON_STARTED"
  "PAIRING_FAIL_REASON_UNKNOWN_IO_CAP"
  "PAIRING_FAIL_REASON_UNSPECIFIED"
  "PAIRING_FAIL_REASON_XTRANS_DERIVE_NOT_ALLOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PairingFailReasonEnum_entries[] = {
  { {PairingFailReasonEnum_names + 0, 28}, 3 },
  { {PairingFailReasonEnum_names + 28, 24}, 275 },
  { {PairingFailReasonEnum_names + 52, 29}, 27 },
  { {PairingFailReasonEnum_names + 81, 44}, 13 },
  { {PairingFailReasonEnum_names + 125, 33}, 4 },
  { {PairingFailReasonEnum_names + 158, 38}, 281 },
  { {PairingFailReasonEnum_names + 196, 29}, 11 },
  { {PairingFailReasonEnum_names + 225, 35}, 276 },
  { {PairingFailReasonEnum_names + 260, 32}, 6 },
  { {PairingFailReasonEnum_names + 292, 24}, 280 },
  { {PairingFailReasonEnum_names + 316, 34}, 271 },
  { {PairingFailReasonEnum_names + 350, 31}, 7 },
  { {PairingFailReasonEnum_names + 381, 38}, 10 },
  { {PairingFailReasonEnum_names + 419, 38}, 12 },
  { {PairingFailReasonEnum_names + 457, 23}, 2 },
  { {PairingFailReasonEnum_names + 480, 36}, 5 },
  { {PairingFailReasonEnum_names + 516, 33}, 1 },
  { {PairingFailReasonEnum_names + 549, 37}, 9 },
  { {PairingFailReasonEnum_names + 586, 28}, 0 },
  { {PairingFailReasonEnum_names + 614, 36}, 278 },
  { {PairingFailReasonEnum_names + 650, 27}, 277 },
  { {PairingFailReasonEnum_names + 677, 34}, 272 },
  { {PairingFailReasonEnum_names + 711, 31}, 8 },
  { {PairingFailReasonEnum_names + 742, 43}, 14 },
};

static const int PairingFailReasonEnum_entries_by_number[] = {
  18, // 0 -> PAIRING_FAIL_REASON_RESERVED
  16, // 1 -> PAIRING_FAIL_REASON_PASSKEY_ENTRY
  14, // 2 -> PAIRING_FAIL_REASON_OOB
  0, // 3 -> PAIRING_FAIL_REASON_AUTH_REQ
  4, // 4 -> PAIRING_FAIL_REASON_CONFIRM_VALUE
  15, // 5 -> PAIRING_FAIL_REASON_PAIR_NOT_SUPPORT
  8, // 6 -> PAIRING_FAIL_REASON_ENC_KEY_SIZE
  11, // 7 -> PAIRING_FAIL_REASON_INVALID_CMD
  22, // 8 -> PAIRING_FAIL_REASON_UNSPECIFIED
  17, // 9 -> PAIRING_FAIL_REASON_REPEATED_ATTEMPTS
  12, // 10 -> PAIRING_FAIL_REASON_INVALID_PARAMETERS
  6, // 11 -> PAIRING_FAIL_REASON_DHKEY_CHK
  13, // 12 -> PAIRING_FAIL_REASON_NUMERIC_COMPARISON
  3, // 13 -> PAIRING_FAIL_REASON_CLASSIC_PAIRING_IN_PROGR
  23, // 14 -> PAIRING_FAIL_REASON_XTRANS_DERIVE_NOT_ALLOW
  2, // 27 -> PAIRING_FAIL_REASON_CANCELLED
  10, // 271 -> PAIRING_FAIL_REASON_INTERNAL_ERROR
  21, // 272 -> PAIRING_FAIL_REASON_UNKNOWN_IO_CAP
  1, // 275 -> PAIRING_FAIL_REASON_BUSY
  7, // 276 -> PAIRING_FAIL_REASON_ENCRYPTION_FAIL
  20, // 277 -> PAIRING_FAIL_REASON_STARTED
  19, // 278 -> PAIRING_FAIL_REASON_RESPONSE_TIMEOUT
  9, // 280 -> PAIRING_FAIL_REASON_FAIL
  5, // 281 -> PAIRING_FAIL_REASON_CONNECTION_TIMEOUT
};

const std::string& PairingFailReasonEnum_Name(
    PairingFailReasonEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PairingFailReasonEnum_entries,
          PairingFailReasonEnum_entries_by_number,
          24, PairingFailReasonEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PairingFailReasonEnum_entries,
      PairingFailReasonEnum_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PairingFailReasonEnum_strings[idx].get();
}
bool PairingFailReasonEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PairingFailReasonEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PairingFailReasonEnum_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<PairingFailReasonEnum>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace smp
}  // namespace bluetooth
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
